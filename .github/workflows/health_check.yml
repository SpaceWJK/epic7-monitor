name: 🏥 Epic7 Health Check (Optimized v3.1)

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable verbose debug logging'
        required: false
        default: 'false'
        type: boolean
      check_level:
        description: 'Health check depth'
        required: false
        default: 'basic'
        type: choice
        options:
          - basic
          - full
          - system
  schedule:
    # 매 6시간마다 정기적으로 실행 (UTC 기준)
    - cron: '0 */6 * * *'

env:
  TZ: Asia/Seoul
  DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
  CHECK_LEVEL: ${{ github.event.inputs.check_level || 'basic' }}

jobs:
  health-check-optimized:
    name: 🩺 System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python (Minimal)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Essential Dependencies
        run: |
          echo "📦 Installing essential dependencies for health check..."
          
          # 헬스체크에 필요한 최소 패키지만 설치
          python -m pip install --upgrade pip --quiet
          pip install --quiet psutil requests
          
          echo "✅ Essential dependencies installed"

      - name: 🩺 Core System Health Check
        id: health_check
        run: |
          echo "🩺 Performing core system health check..."
          
          python -c "
          import psutil
          import sys
          import os
          from datetime import datetime
          
          print('🏥 Epic7 System Health Check')
          print(f'🕒 Check time: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')
          print('=' * 50)
          
          # 1. 프로세스 검증
          target_processes = [
              'monitor_bugs.py',
              'epic7_integrated_monitoring_system.py',
              'python'
          ]
          
          processes_found = []
          for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
              try:
                  if proc.info['cmdline']:
                      cmdline_str = ' '.join(proc.info['cmdline'])
                      for target in target_processes:
                          if target in cmdline_str and 'monitoring' in cmdline_str.lower():
                              processes_found.append({
                                  'pid': proc.info['pid'],
                                  'name': proc.info['name'],
                                  'cmdline': cmdline_str
                              })
                              break
              except (psutil.NoSuchProcess, psutil.AccessDenied):
                  continue
          
          if processes_found:
              print('✅ HEALTHY: Active monitoring processes found:')
              for proc in processes_found:
                  print(f'   - PID {proc[\"pid\"]}: {proc[\"name\"]}')
              health_status = 'HEALTHY'
          else:
              print('⚠️ WARNING: No active monitoring processes found')
              print('   This may be normal if monitoring is scheduled-based')
              health_status = 'WARNING'
          
          # 2. 시스템 리소스 체크
          print('\\n🖥️ System Resources:')
          
          # 메모리
          memory = psutil.virtual_memory()
          print(f'   💾 Memory: {memory.percent}% used ({memory.used//1024//1024}MB/{memory.total//1024//1024}MB)')
          
          # 디스크
          disk = psutil.disk_usage('/')
          print(f'   💿 Disk: {disk.percent}% used ({disk.used//1024//1024//1024}GB/{disk.total//1024//1024//1024}GB)')
          
          # CPU
          cpu_percent = psutil.cpu_percent(interval=1)
          print(f'   🔥 CPU: {cpu_percent}% usage')
          
          # 3. 핵심 서비스 연결 체크만 (Discord 제외)
          print('\\n🌐 Essential Network Connectivity:')
          
          import urllib.request
          import socket
          
          # 모니터링에 필수적인 사이트만 체크
          essential_urls = [
              'https://page.onstove.com',
              'https://cafe.naver.com'
          ]
          
          network_ok = True
          for url in essential_urls:
              try:
                  urllib.request.urlopen(url, timeout=5)
                  print(f'   ✅ {url} - OK')
              except:
                  print(f'   ❌ {url} - Failed')
                  network_ok = False
          
          # 4. 파일 시스템 체크
          print('\\n📁 File System:')
          
          important_files = [
              'monitor_bugs.py',
              'config.py',
              'crawler.py',
              'classifier.py',
              'notifier.py'
          ]
          
          files_ok = True
          missing_files = []
          for file in important_files:
              if os.path.exists(file):
                  size = os.path.getsize(file)
                  print(f'   ✅ {file} - {size} bytes')
              else:
                  print(f'   ❌ {file} - Missing')
                  missing_files.append(file)
                  files_ok = False
          
          # 5. 개선된 상태 결정 로직
          critical_files = ['monitor_bugs.py', 'config.py']
          critical_missing = any(f in missing_files for f in critical_files)
          
          if health_status == 'HEALTHY' and network_ok and not critical_missing:
              final_status = 'HEALTHY'
              exit_code = 0
          elif health_status == 'WARNING' and network_ok and not critical_missing:
              final_status = 'WARNING'
              exit_code = 0
          elif not critical_missing and (network_ok or health_status in ['HEALTHY', 'WARNING']):
              # 네트워크 일시 장애는 WARNING으로 처리
              final_status = 'WARNING'
              exit_code = 0
              print('   ⚠️ Minor network issues detected, but core system is functional')
          else:
              final_status = 'CRITICAL'
              exit_code = 1
          
          print(f'\\n🏥 Overall Status: {final_status}')
          
          # 상태 상세 정보
          if final_status == 'HEALTHY':
              print('   ✅ All systems operational')
          elif final_status == 'WARNING':
              print('   ⚠️ Minor issues detected, monitoring continues')
          else:
              print('   🚨 Critical issues require immediate attention')
          
          # 환경 변수로 상태 전달
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'health_status={final_status}\\n')
              f.write(f'memory_usage={memory.percent}\\n')
              f.write(f'disk_usage={disk.percent}\\n')
              f.write(f'cpu_usage={cpu_percent}\\n')
              f.write(f'processes_found={len(processes_found)}\\n')
              f.write(f'missing_files={len(missing_files)}\\n')
              f.write(f'network_issues={not network_ok}\\n')
          
          sys.exit(exit_code)
          "

      - name: 🔍 Extended Health Check
        if: env.CHECK_LEVEL == 'full' || env.CHECK_LEVEL == 'system'
        run: |
          echo "🔍 Performing extended health check..."
          
          # 데이터 파일 체크
          echo "📊 Data Files Check:"
          data_files=("sentiment_data.json" "crawled_links.json" "monitoring_stats.json")
          
          for file in "${data_files[@]}"; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              modified=$(stat -c%y "$file")
              echo "✅ $file - ${size} bytes, modified: ${modified}"
            else
              echo "⚠️ $file - Not found"
            fi
          done
          
          # 로그 파일 체크
          echo "📋 Log Files Check:"
          find . -name "*.log" -mtime -1 | head -5 | while read log; do
            if [ -f "$log" ]; then
              echo "✅ $log - $(wc -l < "$log") lines"
            fi
          done

      - name: 🌐 Optional External Services Check
        if: env.CHECK_LEVEL == 'full' || env.CHECK_LEVEL == 'system'
        run: |
          echo "🌐 Checking optional external services..."
          
          # 선택적 서비스 체크 (실패해도 CRITICAL 아님)
          optional_services=(
            "https://google.com"
            "https://github.com"
            "https://api.github.com"
          )
          
          for service in "${optional_services[@]}"; do
            if curl -s --head "$service" --max-time 5 | head -n 1 | grep -q "200\|301\|302"; then
              echo "✅ $service - OK"
            else
              echo "⚠️ $service - Not accessible (non-critical)"
            fi
          done

      - name: 🔔 Discord Webhook Validation
        if: env.CHECK_LEVEL == 'full'
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        run: |
          if [[ -n "$DISCORD_WEBHOOK_BUG" ]]; then
            echo "🔔 Validating Discord webhook..."
            
            # 실제 메시지 대신 webhook 유효성만 체크
            if curl -s --head "$DISCORD_WEBHOOK_BUG" --max-time 5 | head -n 1 | grep -q "200\|400"; then
              echo "✅ Discord webhook - Accessible"
            else
              echo "⚠️ Discord webhook - May have issues (non-critical)"
            fi
          else
            echo "⚠️ Discord webhook not configured"
          fi

      - name: 📊 System Diagnostics
        if: env.CHECK_LEVEL == 'system'
        run: |
          echo "📊 System diagnostics..."
          
          # 시스템 정보
          echo "🖥️ System Information:"
          uname -a
          
          # 프로세스 목록
          echo "⚙️ Running Processes:"
          ps aux --sort=-%mem | head -10
          
          # 네트워크 연결
          echo "🌐 Network Connections:"
          netstat -tuln | head -10

      - name: 🎯 Health Check Success Notification
        if: success() && steps.health_check.outputs.health_status == 'HEALTHY'
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        run: |
          if [[ -n "$DISCORD_WEBHOOK_BUG" ]]; then
            echo "📬 Sending health check success notification..."
            
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{
                   \"embeds\": [{
                     \"title\": \"✅ Epic7 System Health Check - HEALTHY\",
                     \"description\": \"모든 시스템이 정상적으로 작동하고 있습니다.\",
                     \"color\": 5763719,
                     \"fields\": [
                       {
                         \"name\": \"🖥️ System Status\",
                         \"value\": \"Memory: ${{ steps.health_check.outputs.memory_usage }}%\\nDisk: ${{ steps.health_check.outputs.disk_usage }}%\\nCPU: ${{ steps.health_check.outputs.cpu_usage }}%\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"⚙️ Processes\",
                         \"value\": \"Active: ${{ steps.health_check.outputs.processes_found }}\\nStatus: Normal\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🕒 Check Time\",
                         \"value\": \"$(date '+%Y-%m-%d %H:%M:%S %Z')\",
                         \"inline\": false
                       }
                     ],
                     \"footer\": {
                       \"text\": \"Epic7 Health Check v3.1 (Optimized)\"
                     }
                   }]
                 }" \
                 "$DISCORD_WEBHOOK_BUG"
            
            echo "✅ Success notification sent"
          else
            echo "⚠️ Discord webhook not configured"
          fi

      - name: ⚠️ Health Check Warning Notification
        if: success() && steps.health_check.outputs.health_status == 'WARNING'
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        run: |
          if [[ -n "$DISCORD_WEBHOOK_BUG" ]]; then
            echo "📬 Sending health check warning notification..."
            
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{
                   \"embeds\": [{
                     \"title\": \"⚠️ Epic7 System Health Check - WARNING\",
                     \"description\": \"시스템이 작동하고 있지만 일부 모니터링 프로세스가 감지되지 않았습니다.\",
                     \"color\": 16776960,
                     \"fields\": [
                       {
                         \"name\": \"🖥️ System Status\",
                         \"value\": \"Memory: ${{ steps.health_check.outputs.memory_usage }}%\\nDisk: ${{ steps.health_check.outputs.disk_usage }}%\\nCPU: ${{ steps.health_check.outputs.cpu_usage }}%\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"⚙️ Processes\",
                         \"value\": \"Active: ${{ steps.health_check.outputs.processes_found }}\\nStatus: Warning\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🔗 Details\",
                         \"value\": \"[워크플로우 로그 확인](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                         \"inline\": false
                       }
                     ],
                     \"footer\": {
                       \"text\": \"Epic7 Health Check v3.1 (Optimized)\"
                     }
                   }]
                 }" \
                 "$DISCORD_WEBHOOK_BUG"
            
            echo "✅ Warning notification sent"
          else
            echo "⚠️ Discord webhook not configured"
          fi

      - name: 🚨 Health Check Critical Notification
        if: failure()
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        run: |
          if [[ -n "$DISCORD_WEBHOOK_BUG" ]]; then
            echo "📬 Sending health check critical notification..."
            
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{
                   \"content\": \"@here\",
                   \"embeds\": [{
                     \"title\": \"🚨 Epic7 System Health Check - CRITICAL\",
                     \"description\": \"**시스템에 심각한 문제가 감지되었습니다!** 즉시 확인이 필요합니다.\",
                     \"color\": 15548997,
                     \"fields\": [
                       {
                         \"name\": \"🖥️ System Status\",
                         \"value\": \"Memory: ${{ steps.health_check.outputs.memory_usage || 'N/A' }}%\\nDisk: ${{ steps.health_check.outputs.disk_usage || 'N/A' }}%\\nCPU: ${{ steps.health_check.outputs.cpu_usage || 'N/A' }}%\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"⚙️ Processes\",
                         \"value\": \"Active: ${{ steps.health_check.outputs.processes_found || '0' }}\\nStatus: Critical\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🔗 Action Required\",
                         \"value\": \"[워크플로우 로그 확인](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                         \"inline\": false
                       }
                     ],
                     \"footer\": {
                       \"text\": \"Epic7 Health Check v3.1 (Optimized) - URGENT\"
                     }
                   }]
                 }" \
                 "$DISCORD_WEBHOOK_BUG"
            
            echo "✅ Critical notification sent"
          else
            echo "⚠️ Discord webhook not configured"
          fi

      - name: 📊 Upload Health Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-report-${{ github.run_id }}
          path: |
            *.log
            health_check_*.json
          retention-days: 30

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up health check..."
          echo "✅ Health check completed"
