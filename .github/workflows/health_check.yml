name: Epic Seven Monitor Health Check

on:
  schedule:
    - cron: "0 */6 * * *"  # 6시간마다
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Chrome and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # ChromeDriver 수동 설치
          CHROME_VERSION=$(google-chrome --version | cut -d' ' -f3 | cut -d'.' -f1)
          echo "Chrome 버전: $CHROME_VERSION"
          
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
          echo "ChromeDriver 버전: $CHROMEDRIVER_VERSION"
          
          wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run health check
        run: |
          echo "🏥 시스템 헬스체크 시작"
          
          # Python 모듈 테스트
          python -c "
          try:
              from crawler import crawl_arca_sites
              from classifier import is_bug_post  
              from notifier import send_bug_alert
              print('✅ 모든 모듈 import 성공')
          except Exception as e:
              print(f'❌ 모듈 import 실패: {e}')
              exit(1)
          "
          
          # 스토브 접속 테스트
          python -c "
          import requests
          try:
              response = requests.get('https://page.onstove.com/epicseven/kr/list/1012', timeout=10)
              if response.status_code == 200:
                  print('✅ 스토브 접속 가능')
              else:
                  print(f'⚠️ 스토브 응답 코드: {response.status_code}')
          except Exception as e:
              print(f'❌ 스토브 접속 실패: {e}')
          "
          
          # ChromeDriver 경로 확인
          echo "🔍 ChromeDriver 경로 확인:"
          which chromedriver || echo "시스템 PATH에 chromedriver 없음"
          ls -la /usr/local/bin/chromedriver || echo "/usr/local/bin/chromedriver 없음"
          
          # Selenium 드라이버 테스트 (개선된 버전)
          python -c "
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.chrome.service import Service
          import os
          
          try:
              options = Options()
              options.add_argument('--headless')
              options.add_argument('--no-sandbox')
              options.add_argument('--disable-dev-shm-usage')
              
              driver = None
              
              # 방법 1: 시스템 ChromeDriver 사용
              try:
                  driver = webdriver.Chrome(options=options)
                  print('✅ Selenium 드라이버 정상 작동 (시스템 경로)')
              except Exception as e1:
                  print(f'⚠️ 시스템 ChromeDriver 실패: {e1}')
                  
                  # 방법 2: 수동 경로 시도
                  paths = ['/usr/local/bin/chromedriver', '/usr/bin/chromedriver']
                  for path in paths:
                      if os.path.exists(path):
                          try:
                              service = Service(path)
                              driver = webdriver.Chrome(service=service, options=options)
                              print(f'✅ Selenium 드라이버 정상 작동 (경로: {path})')
                              break
                          except Exception as e2:
                              print(f'⚠️ 경로 {path} 실패: {e2}')
                  
                  if not driver:
                      print('❌ 모든 ChromeDriver 초기화 방법 실패')
                      exit(1)
              
              # 간단한 테스트
              driver.get('https://www.google.com')
              title = driver.title
              print(f'✅ 페이지 로드 테스트 성공: {title}')
              
          except Exception as e:
              print(f'❌ Selenium 드라이버 실패: {e}')
              exit(1)
          finally:
              if 'driver' in locals() and driver:
                  driver.quit()
          "
          
          echo "🏥 헬스체크 완료"

      - name: Check repository status
        run: |
          echo "📊 리포지토리 상태:"
          echo "- 마지막 커밋: $(git log -1 --format='%h %s %cr')"
          if [[ -f crawled_links.json ]]; then
            echo "- 저장된 링크 수: $(jq length crawled_links.json 2>/dev/null || echo '파일 읽기 실패')"
          else
            echo "- crawled_links.json 파일 없음"
          fi

      - name: System resource check
        run: |
          echo "💾 시스템 리소스 상태:"
          echo "- 메모리: $(free -h | grep '^Mem:' | awk '{print $3"/"$2}')"
          echo "- 디스크: $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5")"}')"
          echo "- Chrome 버전: $(google-chrome --version 2>/dev/null || echo 'Chrome 미설치')"
          echo "- Python 버전: $(python --version)"

      - name: Create health report
        if: always()
        run: |
          echo "🎯 헬스체크 완료 - $(date '+%Y-%m-%d %H:%M:%S KST')" > health_report.txt
          echo "시스템 상태: 정상" >> health_report.txt

      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: health_report.txt
          retention-days: 7
