name: Epic Seven Monitor Health Check

on:
  schedule:
    - cron: "0 */6 * * *"  # 6시간마다 실행
  workflow_dispatch:
    inputs:
      full_check:
        description: 'Run full system check'
        required: false
        default: 'false'
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    env:
      TZ: Asia/Seoul
      DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
      DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🌐 Install Chrome and ChromeDriver (Enhanced)
        run: |
          echo "=== Chrome과 ChromeDriver 설치 시작 ==="
          
          # Chrome 설치
          sudo apt-get update -y
          sudo apt-get install -y google-chrome-stable
          
          # Chrome 버전 확인
          CHROME_VERSION=$(google-chrome --version | cut -d' ' -f3)
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d'.' -f1)
          echo "🌐 Chrome 버전: $CHROME_VERSION (메이저: $CHROME_MAJOR_VERSION)"
          
          # ChromeDriver 설치 (3단계 폴백 메커니즘)
          echo "🔧 ChromeDriver 설치 중..."
          
          # 방법 1: Chrome for Testing API (최신 방식)
          echo "📋 방법 1: Chrome for Testing API 시도"
          if curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" | jq -r ".channels.Stable.downloads.chromedriver[] | select(.platform==\"linux64\") | .url" > /tmp/chromedriver_url.txt 2>/dev/null; then
            CHROMEDRIVER_URL=$(cat /tmp/chromedriver_url.txt)
            if [ ! -z "$CHROMEDRIVER_URL" ]; then
              echo "✅ Chrome for Testing URL 획득: $CHROMEDRIVER_URL"
              if wget -q "$CHROMEDRIVER_URL" -O /tmp/chromedriver.zip; then
                if sudo unzip -q /tmp/chromedriver.zip -d /tmp/ && sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/; then
                  sudo chmod +x /usr/local/bin/chromedriver
                  echo "✅ 방법 1 성공: Chrome for Testing API"
                fi
              fi
            fi
          fi
          
          # 방법 2: WebDriver Manager (Python 패키지)
          if ! command -v chromedriver &> /dev/null; then
            echo "📋 방법 2: WebDriver Manager 시도"
            pip install webdriver-manager
            python -c "
from webdriver_manager.chrome import ChromeDriverManager
import shutil
import os
try:
    driver_path = ChromeDriverManager().install()
    shutil.move(driver_path, '/usr/local/bin/chromedriver')
    os.chmod('/usr/local/bin/chromedriver', 0o755)
    print('✅ 방법 2 성공: WebDriver Manager')
except Exception as e:
    print(f'❌ 방법 2 실패: {e}')
"
          fi
          
          # 방법 3: 직접 다운로드 (최후 수단)
          if ! command -v chromedriver &> /dev/null; then
            echo "📋 방법 3: 직접 다운로드 시도"
            # 안정적인 ChromeDriver 버전 다운로드
            STABLE_VERSION="120.0.6099.109"
            DOWNLOAD_URL="https://storage.googleapis.com/chrome-for-testing-public/${STABLE_VERSION}/linux64/chromedriver-linux64.zip"
            
            if wget -q "$DOWNLOAD_URL" -O /tmp/chromedriver.zip; then
              if sudo unzip -q /tmp/chromedriver.zip -d /tmp/ && sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/; then
                sudo chmod +x /usr/local/bin/chromedriver
                echo "✅ 방법 3 성공: 직접 다운로드"
              fi
            fi
          fi
          
          # 설치 확인
          if command -v chromedriver &> /dev/null; then
            CHROMEDRIVER_VERSION=$(chromedriver --version)
            echo "✅ ChromeDriver 설치 완료: $CHROMEDRIVER_VERSION"
          else
            echo "❌ ChromeDriver 설치 실패"
            exit 1
          fi
          
          # 임시 파일 정리
          rm -f /tmp/chromedriver.zip /tmp/chromedriver_url.txt
          sudo rm -rf /tmp/chromedriver-linux64
          
          echo "🎉 Chrome과 ChromeDriver 설치 완료"

      - name: 📦 Install Python dependencies
        run: |
          echo "=== Python 의존성 설치 ==="
          python -m pip install --upgrade pip
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "✅ requirements.txt 설치 완료"
          else
            echo "⚠️ requirements.txt 없음, 기본 패키지 설치"
            pip install requests beautifulsoup4 selenium webdriver-manager lxml deep-translator python-dateutil
          fi
          
          echo "📦 설치된 패키지 확인:"
          pip list | grep -E "(selenium|requests|beautifulsoup4|lxml|deep-translator)"

      - name: 🧪 System Health Check
        run: |
          echo "=== 시스템 헬스 체크 시작 ==="
          
          # 시스템 리소스 확인
          echo "💾 메모리 사용량:"
          free -h
          echo ""
          
          echo "💿 디스크 사용량:"
          df -h
          echo ""
          
          echo "⚙️ 시스템 정보:"
          echo "OS: $(lsb_release -d | cut -f2)"
          echo "커널: $(uname -r)"
          echo "업타임: $(uptime -p)"
          echo "현재 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo ""
          
          # 네트워크 연결 테스트
          echo "🌐 네트워크 연결 테스트:"
          test_sites=("google.com" "page.onstove.com" "bbs.ruliweb.com" "arca.live" "reddit.com")
          
          for site in "${test_sites[@]}"; do
            if curl -s --head --max-time 10 "https://$site" | grep -q "200 OK"; then
              echo "✅ $site - 연결 성공"
            else
              echo "❌ $site - 연결 실패"
            fi
          done
          echo ""

      - name: 🔧 Chrome Driver Compatibility Test
        run: |
          echo "=== Chrome Driver 호환성 테스트 ==="
          
          # Chrome과 ChromeDriver 버전 비교
          CHROME_VERSION=$(google-chrome --version | cut -d' ' -f3)
          CHROMEDRIVER_VERSION=$(chromedriver --version | cut -d' ' -f2)
          
          echo "🌐 Chrome 버전: $CHROME_VERSION"
          echo "🔧 ChromeDriver 버전: $CHROMEDRIVER_VERSION"
          
          # 간단한 Selenium 테스트
          echo "🧪 Selenium 호환성 테스트:"
          python -c "
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
import time

options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')

try:
    service = Service('/usr/local/bin/chromedriver')
    driver = webdriver.Chrome(service=service, options=options)
    
    driver.get('https://google.com')
    title = driver.title
    print(f'✅ Selenium 테스트 성공: {title}')
    
    driver.quit()
    print('✅ Chrome Driver 호환성 확인 완료')
    
except Exception as e:
    print(f'❌ Selenium 테스트 실패: {e}')
    exit(1)
"

      - name: 🐍 Python Module Health Check
        run: |
          echo "=== Python 모듈 헬스 체크 ==="
          
          # 기본 모듈 테스트
          echo "📋 기본 모듈 테스트:"
          python -c "
import sys
modules = ['json', 'os', 'time', 'datetime', 're', 'random', 'hashlib', 'urllib.parse']
for module in modules:
    try:
        __import__(module)
        print(f'✅ {module}')
    except ImportError as e:
        print(f'❌ {module}: {e}')
"
          
          # 외부 모듈 테스트
          echo "📋 외부 모듈 테스트:"
          python -c "
modules = ['requests', 'bs4', 'selenium', 'lxml', 'deep_translator']
for module in modules:
    try:
        __import__(module)
        print(f'✅ {module}')
    except ImportError as e:
        print(f'❌ {module}: {e}')
"
          
          # 프로젝트 모듈 테스트 (존재하는 경우)
          echo "📋 프로젝트 모듈 테스트:"
          project_modules=("crawler.py" "classifier.py" "notifier.py" "monitor_bugs.py")
          
          for module in "${project_modules[@]}"; do
            if [ -f "$module" ]; then
              echo "✅ $module 존재함"
              # 문법 검사
              if python -m py_compile "$module" 2>/dev/null; then
                echo "✅ $module 문법 검사 통과"
              else
                echo "❌ $module 문법 오류"
              fi
            else
              echo "⚠️ $module 파일 없음"
            fi
          done

      - name: 📊 Repository Health Check
        run: |
          echo "=== 리포지토리 헬스 체크 ==="
          
          # Git 상태 확인
          echo "📍 Git 상태:"
          echo "현재 브랜치: $(git branch --show-current)"
          echo "최신 커밋: $(git log -1 --oneline)"
          echo "원격 브랜치와 동기화: $(git status -b --porcelain=v1 2>/dev/null | head -1)"
          echo ""
          
          # 중요 파일 존재 확인
          echo "📁 중요 파일 존재 확인:"
          important_files=(
            "requirements.txt"
            "monitor_bugs.py"
            "crawler.py"
            "classifier.py"
            "notifier.py"
            ".github/workflows/bug_monitor.yml"
            ".github/workflows/bug_monitor_korean.yml"
            ".github/workflows/bug_monitor_global.yml"
          )
          
          for file in "${important_files[@]}"; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              echo "✅ $file (${size} bytes)"
            else
              echo "❌ $file 없음"
            fi
          done
          echo ""
          
          # 데이터 파일 상태 확인
          echo "📊 데이터 파일 상태:"
          data_files=("crawled_links.json" "crawled_links_korean.json" "crawled_links_global.json")
          
          for file in "${data_files[@]}"; do
            if [ -f "$file" ]; then
              if command -v jq &> /dev/null; then
                count=$(jq '. | length' "$file" 2>/dev/null || echo "0")
                last_update=$(jq -r '.last_updated // "N/A"' "$file" 2>/dev/null || echo "N/A")
                echo "✅ $file: ${count}개 링크 (마지막 업데이트: $last_update)"
              else
                size=$(stat -c%s "$file")
                echo "✅ $file (${size} bytes)"
              fi
            else
              echo "⚠️ $file 없음 (새로 생성될 예정)"
            fi
          done

      - name: 🎯 Full System Test
        if: github.event.inputs.full_check == 'true'
        run: |
          echo "=== 전체 시스템 테스트 시작 ==="
          
          # 한국 사이트 테스트
          echo "🇰🇷 한국 사이트 테스트:"
          if [ -f "monitor_bugs.py" ]; then
            timeout 300 python monitor_bugs.py --mode korean --debug --test || echo "⚠️ 한국 사이트 테스트 제한 시간 초과"
          else
            echo "⚠️ monitor_bugs.py 없음, 테스트 생략"
          fi
          
          # 글로벌 사이트 테스트
          echo "🌍 글로벌 사이트 테스트:"
          if [ -f "monitor_bugs.py" ]; then
            timeout 300 python monitor_bugs.py --mode global --debug --test || echo "⚠️ 글로벌 사이트 테스트 제한 시간 초과"
          else
            echo "⚠️ monitor_bugs.py 없음, 테스트 생략"
          fi
          
          echo "✅ 전체 시스템 테스트 완료"

      - name: 📈 Generate Health Report
        if: always()
        run: |
          echo "=== 헬스 체크 리포트 생성 ==="
          
          # 리포트 파일 생성
          cat > health_report.md << 'EOF'
# Epic7 모니터링 시스템 헬스 체크 리포트

**생성 시간:** $(date '+%Y-%m-%d %H:%M:%S %Z')
**실행 모드:** ${{ github.event.inputs.full_check == 'true' && 'Full Check' || 'Standard Check' }}
**워크플로우 ID:** ${{ github.run_id }}

## 🌐 시스템 환경
- **OS:** $(lsb_release -d | cut -f2)
- **Python:** $(python --version)
- **Chrome:** $(google-chrome --version)
- **ChromeDriver:** $(chromedriver --version)

## 💾 리소스 상태
$(free -h)

## 🔧 주요 컴포넌트 상태
| 컴포넌트 | 상태 | 비고 |
|---------|------|------|
| Chrome Browser | ✅ 정상 | $(google-chrome --version) |
| ChromeDriver | ✅ 정상 | $(chromedriver --version) |
| Python | ✅ 정상 | $(python --version) |
| Selenium | ✅ 정상 | 호환성 테스트 통과 |

## 📊 모니터링 파일 상태
EOF
          
          # 파일 상태 추가
          if [ -f "crawled_links.json" ]; then
            if command -v jq &> /dev/null; then
              count=$(jq '. | length' crawled_links.json 2>/dev/null || echo "0")
              echo "- **크롤링 링크:** ${count}개 저장됨" >> health_report.md
            fi
          fi
          
          echo "- **리포트 생성:** $(date '+%Y-%m-%d %H:%M:%S')" >> health_report.md
          echo "" >> health_report.md
          echo "## 🎯 권장 사항" >> health_report.md
          echo "- 정기적인 헬스 체크 (6시간마다 자동 실행)" >> health_report.md
          echo "- 크롤링 데이터 백업 (weekly)" >> health_report.md
          echo "- Chrome/ChromeDriver 업데이트 모니터링" >> health_report.md
          
          echo "📄 헬스 리포트 생성 완료"

      - name: 📤 Upload Health Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-report-${{ github.run_number }}
          path: |
            health_report.md
            *.log
            *_debug_*.html
          retention-days: 14

      - name: 🔄 Cleanup and Final Status
        if: always()
        run: |
          echo "=== 최종 상태 및 정리 ==="
          
          # 임시 파일 정리
          rm -f /tmp/chromedriver*
          rm -f *_debug_*.html
          
          # 최종 상태 리포트
          echo "🎉 헬스 체크 완료 요약:"
          echo "- 실행 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "- 워크플로우 상태: ${{ job.status }}"
          echo "- Chrome 버전: $(google-chrome --version)"
          echo "- ChromeDriver 버전: $(chromedriver --version)"
          echo "- 메모리 사용량: $(free -h | grep Mem | awk '{print $3"/"$2}')"
          
          # 시스템 상태 판정
          if command -v chromedriver &> /dev/null && command -v google-chrome &> /dev/null; then
            echo "✅ 모든 핵심 컴포넌트가 정상 작동 중"
            echo "✅ Epic7 모니터링 시스템 헬스 체크 성공"
          else
            echo "❌ 일부 컴포넌트에 문제가 있습니다"
            echo "❌ 시스템 점검이 필요합니다"
          fi
          
          echo "🔄 정리 완료"