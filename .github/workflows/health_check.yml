name: Epic Seven Monitor Health Check

on:
  schedule:
    - cron: "0 */6 * * *"  # 6시간마다
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Chrome and ChromeDriver (Compatible Version)
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Chrome 버전 정확히 추출
          CHROME_VERSION=$(google-chrome --version | sed 's/.*Chrome \([0-9\.]*\).*/\1/')
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d'.' -f1)
          echo "🌟 Chrome 버전: $CHROME_VERSION (주버전: $CHROME_MAJOR_VERSION)"
          
          # 기존 ChromeDriver 제거 (버전 충돌 방지)
          sudo rm -f /usr/local/bin/chromedriver
          
          # 정확히 매칭되는 ChromeDriver 버전 찾기
          echo "🔍 ChromeDriver 버전 탐색 중..."
          
          # 방법 1: 정확한 Chrome 버전과 매칭되는 ChromeDriver
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_MAJOR_VERSION}" || echo "")
          
          # 방법 2: 정확한 버전이 없으면 안정 버전 사용
          if [ -z "$CHROMEDRIVER_VERSION" ] || [ "$CHROMEDRIVER_VERSION" = "Not Found" ]; then
            echo "⚠️ 정확한 버전을 찾을 수 없어 안정 버전 사용"
            CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE" || echo "")
          fi
          
          # 방법 3: 최후 수단으로 하드코딩된 안정 버전
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            CHROMEDRIVER_VERSION="119.0.6045.105"  # 알려진 안정 버전
            echo "⚠️ 모든 API 실패, 하드코딩된 안정 버전 사용: $CHROMEDRIVER_VERSION"
          fi
          
          echo "✅ 선택된 ChromeDriver 버전: $CHROMEDRIVER_VERSION"
          
          # ChromeDriver 다운로드 및 설치
          DOWNLOAD_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          echo "📥 다운로드 URL: $DOWNLOAD_URL"
          
          # 다운로드 시도
          if wget -q --spider "$DOWNLOAD_URL"; then
            wget -O /tmp/chromedriver.zip "$DOWNLOAD_URL"
            sudo unzip /tmp/chromedriver.zip -d /tmp/
            sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            echo "✅ ChromeDriver 설치 완료: $(chromedriver --version 2>/dev/null || echo '버전 확인 실패')"
          else
            echo "❌ 다운로드 실패, 우분투 패키지 사용"
            sudo apt-get install -y chromium-chromedriver
            sudo ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Module import test
        run: |
          echo "🧪 Python 모듈 테스트"
          python3 -c "
          try:
              from crawler import crawl_arca_sites, get_chrome_driver
              from classifier import is_bug_post  
              from notifier import send_bug_alert
              print('✅ 모든 모듈 import 성공')
          except Exception as e:
              print(f'❌ 모듈 import 실패: {e}')
              exit(1)
          "

      - name: Network connectivity test
        run: |
          echo "🌐 네트워크 연결 테스트"
          python3 -c "
          import requests
          try:
              response = requests.get('https://page.onstove.com/epicseven/kr/list/1012', timeout=10)
              if response.status_code == 200:
                  print('✅ 스토브 접속 가능')
              else:
                  print(f'⚠️ 스토브 응답 코드: {response.status_code}')
          except Exception as e:
              print(f'❌ 스토브 접속 실패: {e}')
          "

      - name: ChromeDriver status check
        run: |
          echo "🔍 ChromeDriver 상태 확인:"
          echo "- Chrome 버전: $(google-chrome --version)"
          echo "- ChromeDriver 경로:"
          which chromedriver && echo "  System PATH: $(which chromedriver)" || echo "  System PATH: 없음"
          ls -la /usr/local/bin/chromedriver 2>/dev/null && echo "  /usr/local/bin/chromedriver: 존재" || echo "  /usr/local/bin/chromedriver: 없음"
          ls -la /usr/bin/chromedriver 2>/dev/null && echo "  /usr/bin/chromedriver: 존재" || echo "  /usr/bin/chromedriver: 없음"
          
          # ChromeDriver 버전 확인
          echo "- ChromeDriver 버전들:"
          if [ -f "/usr/local/bin/chromedriver" ]; then
            echo "  /usr/local/bin/chromedriver: $(/usr/local/bin/chromedriver --version 2>/dev/null || echo '버전 확인 실패')"
          fi
          if [ -f "/usr/bin/chromedriver" ]; then
            echo "  /usr/bin/chromedriver: $(/usr/bin/chromedriver --version 2>/dev/null || echo '버전 확인 실패')"
          fi

      - name: Selenium driver test
        run: |
          echo "🔧 Selenium 드라이버 테스트"
          python3 -c "
          from crawler import get_chrome_driver
          import os
          
          try:
              print('🔧 Selenium 드라이버 테스트 시작')
              driver = get_chrome_driver()
              
              # 간단한 테스트 수행
              driver.get('https://www.google.com')
              title = driver.title
              print(f'✅ 페이지 로드 테스트 성공: {title}')
              
              # 드라이버 정보 출력
              caps = driver.capabilities
              browser_version = caps.get('browserVersion', 'Unknown')
              driver_version = caps.get('chrome', {}).get('chromedriverVersion', 'Unknown')
              print(f'✅ 브라우저 버전: {browser_version}')
              print(f'✅ ChromeDriver 버전: {driver_version}')
              
              driver.quit()
              print('✅ Selenium 드라이버 테스트 완료')
              
          except Exception as e:
              print(f'❌ Selenium 드라이버 실패: {e}')
              exit(1)
          "

      - name: Check repository status
        run: |
          echo "📊 리포지토리 상태:"
          echo "- 마지막 커밋: $(git log -1 --format='%h %s %cr')"
          if [[ -f crawled_links.json ]]; then
            echo "- 저장된 링크 수: $(jq length crawled_links.json 2>/dev/null || echo '파일 읽기 실패')"
          else
            echo "- crawled_links.json 파일 없음"
          fi

      - name: System resource check
        run: |
          echo "💾 시스템 리소스 상태:"
          echo "- 메모리: $(free -h | grep '^Mem:' | awk '{print $3"/"$2}')"
          echo "- 디스크: $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5")"}')"
          echo "- Chrome 버전: $(google-chrome --version 2>/dev/null || echo 'Chrome 미설치')"
          echo "- Python 버전: $(python3 --version)"

      - name: Final health summary
        run: |
          echo "🎯 헬스체크 완료 - $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "✅ 시스템 상태: 정상"

      - name: Create health report
        if: always()
        run: |
          echo "🎯 헬스체크 완료 - $(date '+%Y-%m-%d %H:%M:%S KST')" > health_report.txt
          echo "시스템 상태: 정상" >> health_report.txt

      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: health_report.txt
          retention-days: 7
