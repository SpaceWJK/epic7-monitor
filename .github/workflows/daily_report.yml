name: Epic Seven Daily Report (Optimized)

on:
  schedule:
    # 매일 오전 9시 KST (UTC 0시)
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      force_report:
        description: 'Force generate report even if no posts'
        required: false
        default: 'false'
        type: boolean

jobs:
  daily-report:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    env:
      TZ: Asia/Seoul
      PYTHONUNBUFFERED: 1
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 🌐 Install Chrome (Simplified)
        run: |
          echo "=== Chrome 설치 시작 ==="
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          echo "Chrome 버전: $(google-chrome --version)"
          echo "Chrome 설치 완료"

      - name: 📦 Install Python dependencies
        run: |
          echo "=== Python 의존성 설치 ==="
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "의존성 설치 완료"

      - name: 🔍 Generate daily report
        run: |
          echo "=== 일일 리포트 생성 시작 ==="
          echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "강제 실행 모드: ${{ github.event.inputs.force_report }}"
          
          if [ "${{ github.event.inputs.force_report }}" = "true" ]; then
            echo "🔄 강제 리포트 생성 모드"
            python generate_report.py --force
          else
            python generate_report.py
          fi
          
          echo "리포트 생성 완료: $(date '+%Y-%m-%d %H:%M:%S KST')"
        env:
          DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}

      - name: 📊 Upload report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: daily-report-${{ github.run_number }}
          path: |
            *_debug_*.html
            *.json
            *.log
          retention-days: 7

      - name: 🗂️ Archive and cleanup
        run: |
          echo "=== 파일 정리 및 보관 ==="
          
          # 저장된 링크 수 확인
          if [[ -f crawled_links.json ]]; then
            LINK_COUNT=$(jq length crawled_links.json 2>/dev/null || echo "0")
            echo "📊 현재 저장된 링크 수: $LINK_COUNT"
            
            # 1000개 이상이면 최신 800개만 유지
            if [[ $LINK_COUNT -gt 1000 ]]; then
              echo "🔄 링크 개수 최적화: $LINK_COUNT → 800개"
              jq '.links |= .[-800:]' crawled_links.json > temp.json && mv temp.json crawled_links.json
              echo "링크 정리 완료"
            fi
          fi
          
          # 메모리 사용량 확인
          echo "💾 메모리 사용량:"
          free -h

      - name: 📈 Daily report summary
        run: |
          echo "=== 일일 리포트 실행 요약 ==="
          echo "📅 생성 날짜: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "🔄 워크플로우 ID: ${{ github.run_number }}"
          echo "📬 Discord 웹훅: ${{ secrets.DISCORD_WEBHOOK_REPORT && '설정됨' || '미설정' }}"
          
          # 디버그 파일 확인
          DEBUG_FILES=$(find . -name "*_debug_*.html" -type f | wc -l)
          echo "🔍 생성된 디버그 파일: ${DEBUG_FILES}개"
          
          # 결과 파일 확인
          if [[ -f crawled_links.json ]]; then
            FINAL_LINK_COUNT=$(jq length crawled_links.json 2>/dev/null || echo "0")
            echo "📊 최종 저장된 링크 수: $FINAL_LINK_COUNT"
          fi

      - name: 💾 Commit changes
        run: |
          echo "=== Git 변경사항 처리 ==="
          
          git config --local user.email "epic7-report@github.com"
          git config --local user.name "Epic7 Report Bot"
          
          # 변경된 파일 확인
          git add -A
          
          if git diff --staged --quiet; then
            echo "변경 사항 없음"
          else
            echo "변경 사항 발견, 커밋 진행"
            git status --porcelain
            
            # 커밋 메시지 생성
            COMMIT_MSG="📊 일일 리포트 생성 - $(date '+%Y-%m-%d %H:%M KST')"
            
            git commit -m "$COMMIT_MSG"
            git push
            echo "Git 커밋 및 푸시 완료"
          fi

      - name: 🔔 Report completion status
        if: always()
        run: |
          echo "=== 최종 실행 상태 ==="
          echo "작업 상태: ${{ job.status }}"
          echo "완료 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ 일일 리포트 생성 성공"
          else
            echo "❌ 일일 리포트 생성 실패"
            echo "로그를 확인하여 문제를 파악하세요."
          fi