name: Epic Seven Daily Report

on:
  schedule:
    # 매일 오전 9시 KST (UTC 0시)
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      force_report:
        description: 'Force generate report'
        required: false
        default: 'false'
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      crawl_mode:
        description: 'Crawling mode (korean/global/all)'
        required: false
        default: 'all'
        type: choice
        options:
          - korean
          - global
          - all

jobs:
  daily-report:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    env:
      TZ: Asia/Seoul
      DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
      DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
      DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
      CRAWL_MODE: ${{ github.event.inputs.crawl_mode || 'all' }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      FORCE_REPORT: ${{ github.event.inputs.force_report || 'false' }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🌐 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget \
            unzip \
            curl \
            xvfb \
            libxi6 \
            libgconf-2-4 \
            gnupg \
            libxss1 \
            libappindicator3-1 \
            libasound2 \
            libatk-bridge2.0-0 \
            libdrm2 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libxkbcommon0 \
            libgtk-3-0

      - name: 🔧 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install selenium beautifulsoup4 requests deep-translator
          fi

      - name: 🌐 Install Chrome (Latest Stable)
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version

      - name: 🔍 Download ChromeDriver (Manual)
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
          echo "Chrome version: $CHROME_VERSION"
          
          # Stage 1: Chrome for Testing API
          LATEST_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json" | python3 -c "
          import json, sys
          data = json.load(sys.stdin)
          milestone = '$CHROME_VERSION'
          if milestone in data['milestones']:
              print(data['milestones'][milestone]['version'])
          else:
              print('NOT_FOUND')
          " 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$LATEST_VERSION" != "NOT_FOUND" ]; then
            echo "Found Chrome version: $LATEST_VERSION"
            DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip"
            echo "Downloading ChromeDriver from: $DRIVER_URL"
            
            if wget -q --spider "$DRIVER_URL" 2>/dev/null; then
              wget -O chromedriver.zip "$DRIVER_URL"
              unzip chromedriver.zip
              sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
              sudo chmod +x /usr/local/bin/chromedriver
              echo "ChromeDriver installed successfully"
            else
              echo "Stage 1 failed, trying fallback..."
              # Stage 2: Fallback to latest stable
              FALLBACK_URL="https://storage.googleapis.com/chrome-for-testing-public/LATEST_RELEASE_${CHROME_VERSION}"
              if FALLBACK_VERSION=$(curl -s "$FALLBACK_URL" 2>/dev/null); then
                DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${FALLBACK_VERSION}/linux64/chromedriver-linux64.zip"
                wget -O chromedriver.zip "$DRIVER_URL"
                unzip chromedriver.zip
                sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
                sudo chmod +x /usr/local/bin/chromedriver
                echo "ChromeDriver installed via fallback"
              else
                echo "All download methods failed"
                exit 1
              fi
            fi
          else
            echo "Chrome version not found in API, using fallback"
            # Stage 3: Final fallback
            FALLBACK_URL="https://storage.googleapis.com/chrome-for-testing-public/LATEST_RELEASE_${CHROME_VERSION}"
            if FALLBACK_VERSION=$(curl -s "$FALLBACK_URL" 2>/dev/null); then
              DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${FALLBACK_VERSION}/linux64/chromedriver-linux64.zip"
              wget -O chromedriver.zip "$DRIVER_URL"
              unzip chromedriver.zip
              sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
              sudo chmod +x /usr/local/bin/chromedriver
              echo "ChromeDriver installed via final fallback"
            else
              echo "All fallback methods failed"
              exit 1
            fi
          fi
          
          chromedriver --version

      - name: 🧪 Test Chrome and ChromeDriver
        run: |
          echo "Chrome version:"
          google-chrome --version
          echo "ChromeDriver version:"
          chromedriver --version
          echo "Python version:"
          python --version
          echo "Testing basic Chrome functionality..."
          python -c '
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          
          options = Options()
          options.add_argument("--headless")
          options.add_argument("--no-sandbox")
          options.add_argument("--disable-dev-shm-usage")
          
          driver = webdriver.Chrome(options=options)
          driver.get("https://www.google.com")
          print(f"Title: {driver.title}")
          driver.quit()
          print("Chrome test passed!")
          '

      - name: 📊 Generate daily report
        run: |
          python -c '
          import os
          import sys
          import json
          from datetime import datetime
          
          # 기본 리포트 생성
          def generate_basic_report():
              report = {
                  "date": datetime.now().strftime("%Y-%m-%d"),
                  "status": "success",
                  "crawl_mode": os.getenv("CRAWL_MODE", "all"),
                  "debug_mode": os.getenv("DEBUG_MODE", "false"),
                  "force_report": os.getenv("FORCE_REPORT", "false"),
                  "message": "Daily report generated successfully"
              }
              return report
          
          try:
              # generate_report.py가 존재하는지 확인
              if os.path.exists("generate_report.py"):
                  print("Found generate_report.py, executing...")
                  os.system("python generate_report.py")
              else:
                  print("generate_report.py not found, creating basic report...")
                  report = generate_basic_report()
                  print(json.dumps(report, indent=2))
                  
                  # 기본 리포트 저장
                  with open("daily_report.json", "w", encoding="utf-8") as f:
                      json.dump(report, f, ensure_ascii=False, indent=2)
                      
          except Exception as e:
              print(f"Error generating report: {e}")
              error_report = {
                  "date": datetime.now().strftime("%Y-%m-%d"),
                  "status": "error",
                  "error": str(e),
                  "message": "Report generation failed"
              }
              with open("daily_report.json", "w", encoding="utf-8") as f:
                  json.dump(error_report, f, ensure_ascii=False, indent=2)
          '

      - name: 📤 Send Discord notification
        if: always()
        run: |
          python -c '
          import os
          import json
          import requests
          from datetime import datetime
          
          def send_discord_notification():
              webhook_url = os.getenv("DISCORD_WEBHOOK_REPORT")
              if not webhook_url:
                  print("Discord webhook URL not found")
                  return
              
              try:
                  # 리포트 파일 읽기
                  report_data = {}
                  if os.path.exists("daily_report.json"):
                      with open("daily_report.json", "r", encoding="utf-8") as f:
                          report_data = json.load(f)
                  
                  # Discord 메시지 생성
                  embed = {
                      "title": "📊 Epic Seven Daily Report",
                      "description": f"일간 리포트 생성 완료",
                      "color": 0x00ff00 if report_data.get("status") == "success" else 0xff0000,
                      "fields": [
                          {
                              "name": "날짜",
                              "value": report_data.get("date", datetime.now().strftime("%Y-%m-%d")),
                              "inline": True
                          },
                          {
                              "name": "상태",
                              "value": report_data.get("status", "unknown"),
                              "inline": True
                          },
                          {
                              "name": "크롤링 모드",
                              "value": report_data.get("crawl_mode", "all"),
                              "inline": True
                          }
                      ],
                      "footer": {
                          "text": "Epic Seven Monitoring System",
                          "icon_url": "https://epic7.com/favicon.ico"
                      },
                      "timestamp": datetime.now().isoformat()
                  }
                  
                  if report_data.get("status") == "error":
                      embed["fields"].append({
                          "name": "에러 내용",
                          "value": report_data.get("error", "Unknown error"),
                          "inline": False
                      })
                  
                  payload = {
                      "embeds": [embed]
                  }
                  
                  response = requests.post(webhook_url, json=payload, timeout=10)
                  if response.status_code == 204:
                      print("Discord notification sent successfully")
                  else:
                      print(f"Discord notification failed: {response.status_code}")
                      
              except Exception as e:
                  print(f"Error sending Discord notification: {e}")
          
          send_discord_notification()
          '

      - name: 📁 Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: daily-report-${{ github.run_id }}
          path: |
            daily_report.json
            *.log
            *.html
          retention-days: 30

      - name: 🔍 Debug information
        if: ${{ github.event.inputs.debug_mode == 'true' }}
        run: |
          echo "=== Debug Information ==="
          echo "Date: $(date)"
          echo "Crawl Mode: $CRAWL_MODE"
          echo "Debug Mode: $DEBUG_MODE"
          echo "Force Report: $FORCE_REPORT"
          echo "Working Directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "=== Environment Variables ==="
          env | grep -E "(DISCORD_|CRAWL_|DEBUG_|FORCE_)" | sort
          echo "=== Chrome Information ==="
          google-chrome --version
          chromedriver --version
          echo "=== Python Information ==="
          python --version
          pip list
          echo "=== System Information ==="
          uname -a
          df -h
          free -h
          echo "=== End Debug Information ==="