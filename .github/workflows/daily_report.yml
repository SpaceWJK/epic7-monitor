name: 📊 Epic7 Daily Report (Optimized v3.1)

on:
  schedule:
    - cron: "0 9 * * *"  # 매일 오전 9시 실행
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '🔍 Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      report_period:
        description: '📅 Report period in hours'
        required: false
        default: '24'
        type: choice
        options:
          - '12'
          - '24'
          - '48'
      force_regenerate:
        description: '🔄 Force regenerate all data'
        required: false
        default: 'false'
        type: boolean

env:
  TZ: Asia/Seoul
  PYTHONUNBUFFERED: 1
  DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
  DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
  REPORT_PERIOD: ${{ github.event.inputs.report_period || '24' }}
  FORCE_REGENERATE: ${{ github.event.inputs.force_regenerate || 'false' }}

jobs:
  daily-report-optimized:
    name: 📈 Generate Daily Report (Optimized)
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 기존 30분 → 15분으로 단축
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python Environment (Optimized)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Minimal Dependencies
        run: |
          echo "📦 Installing minimal dependencies for report generation..."
          pip install --upgrade pip --quiet
          # 리포트 생성에 필요한 최소 패키지만 설치
          pip install requests python-dateutil --quiet
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Validate Data Sources
        run: |
          echo "🔍 Validating existing data sources..."
          
          # bug_monitor.yml에서 생성된 데이터 파일 확인
          DATA_FOUND=false
          
          if [ -f "sentiment_data.json" ]; then
            echo "✅ Found sentiment_data.json"
            DATA_FOUND=true
          fi
          
          if [ -f "crawled_links.json" ]; then
            echo "✅ Found crawled_links.json"
            DATA_FOUND=true
          fi
          
          if [ -f "monitoring_stats.json" ]; then
            echo "✅ Found monitoring_stats.json"
            DATA_FOUND=true
          fi
          
          if [ "$DATA_FOUND" = "false" ]; then
            echo "⚠️ No data files found. Report will be generated with available system data."
          fi
          
          echo "📊 Data validation completed"

      - name: 📊 Generate Optimized Daily Report
        run: |
          echo "📊 Generating optimized daily report..."
          
          # 리포트 생성 스크립트 실행 (존재하는 경우)
          if [ -f "generate_report.py" ]; then
            echo "🚀 Running generate_report.py..."
            python generate_report.py \
              --period $REPORT_PERIOD \
              --debug $DEBUG_MODE \
              --force-regenerate $FORCE_REGENERATE
          else
            echo "📝 Generating basic report template..."
            
            # 기본 리포트 템플릿 생성
            cat > daily_report.md << 'EOF'
          # 📊 Epic7 Daily Report
          
          **생성 시간:** $(date '+%Y-%m-%d %H:%M:%S %Z')
          **리포트 기간:** $REPORT_PERIOD hours
          **모드:** $([ "$DEBUG_MODE" = "true" ] && echo "Debug" || echo "Production")
          
          ## 📈 시스템 상태
          
          ### 📁 데이터 파일 현황
          $(find . -name "*.json" -type f | wc -l) JSON 파일 발견
          $(find . -name "*.log" -type f | wc -l) 로그 파일 발견
          
          ### 🖥️ 시스템 정보
          - **운영체제:** $(uname -a)
          - **Python 버전:** $(python --version)
          - **메모리 사용량:** $(free -h | grep Mem | awk '{print $3 "/" $2}')
          - **디스크 사용량:** $(df -h . | tail -1 | awk '{print $3 "/" $2 " (" $5 ")"}')
          
          ## 📊 데이터 요약
          
          ### 감성 데이터
          $(if [ -f "sentiment_data.json" ]; then
            echo "✅ 감성 데이터 파일 존재"
            echo "📝 마지막 업데이트: $(stat -c %y sentiment_data.json)"
          else
            echo "⚠️ 감성 데이터 파일 없음"
          fi)
          
          ### 크롤링 데이터
          $(if [ -f "crawled_links.json" ]; then
            echo "✅ 크롤링 데이터 파일 존재"
            echo "📝 마지막 업데이트: $(stat -c %y crawled_links.json)"
          else
            echo "⚠️ 크롤링 데이터 파일 없음"
          fi)
          
          ### 모니터링 통계
          $(if [ -f "monitoring_stats.json" ]; then
            echo "✅ 모니터링 통계 파일 존재"
            echo "📝 마지막 업데이트: $(stat -c %y monitoring_stats.json)"
          else
            echo "⚠️ 모니터링 통계 파일 없음"
          fi)
          
          ---
          
          **생성 완료:** $(date '+%Y-%m-%d %H:%M:%S %Z')
          EOF
          
            # 환경 변수 치환
            envsubst < daily_report.md > daily_report_final.md
            mv daily_report_final.md daily_report.md
          fi
          
          echo "✅ Daily report generated successfully"

      - name: 📤 Upload Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: daily-report-${{ github.run_id }}
          path: |
            daily_report.md
            *.json
            *.log
          retention-days: 7
          compression-level: 6

      - name: 📬 Send Discord Report Notification
        if: always()
        run: |
          if [[ -n "$DISCORD_WEBHOOK_REPORT" ]]; then
            echo "📬 Sending Discord notification..."
            
            # 성공/실패 상태 결정
            STATUS_COLOR=$([ "${{ job.status }}" = "success" ] && echo "3066993" || echo "15158332")
            STATUS_EMOJI=$([ "${{ job.status }}" = "success" ] && echo "✅" || echo "❌")
            
            # 리포트 파일 크기 확인
            REPORT_SIZE=$([ -f "daily_report.md" ] && du -h daily_report.md | cut -f1 || echo "N/A")
            
            # Discord 메시지 생성
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{
                   \"embeds\": [{
                     \"title\": \"$STATUS_EMOJI Epic7 Daily Report\",
                     \"description\": \"일일 리포트 생성 $([ "${{ job.status }}" = "success" ] && echo "완료" || echo "실패")\",
                     \"color\": $STATUS_COLOR,
                     \"fields\": [
                       {
                         \"name\": \"📅 리포트 기간\",
                         \"value\": \"$REPORT_PERIOD 시간\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🔍 디버그 모드\",
                         \"value\": \"$DEBUG_MODE\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"📁 리포트 크기\",
                         \"value\": \"$REPORT_SIZE\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🖥️ 시스템 정보\",
                         \"value\": \"메모리: $(free -h | grep Mem | awk '{print $3}') / 디스크: $(df -h . | tail -1 | awk '{print $5}')\",
                         \"inline\": false
                       },
                       {
                         \"name\": \"⏱️ 실행 시간\",
                         \"value\": \"$(date '+%Y-%m-%d %H:%M:%S %Z')\",
                         \"inline\": false
                       }
                     ],
                     \"footer\": {
                       \"text\": \"Epic7 Daily Report v3.1 (Optimized)\"
                     }
                   }]
                 }" \
                 "$DISCORD_WEBHOOK_REPORT"
            
            echo "✅ Discord notification sent successfully"
          else
            echo "⚠️ Discord webhook not configured"
          fi

      - name: 🔄 Commit Report Changes
        if: success()
        run: |
          echo "🔄 Committing report changes..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 변경사항 확인
          if [[ -n $(git status --porcelain) ]]; then
            echo "📝 Changes detected, committing..."
            git add daily_report.md *.json *.log 2>/dev/null || true
            git commit -m "📊 Daily Report: $(date '+%Y-%m-%d %H:%M:%S')" || true
            git push || echo "⚠️ Push failed - continuing..."
            echo "✅ Report committed successfully"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          
          # 임시 파일 정리
          rm -f /tmp/daily_report_* 2>/dev/null || true
          rm -f /tmp/report_data_* 2>/dev/null || true
          
          echo "✅ Cleanup completed"
