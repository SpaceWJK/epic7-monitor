name: Epic Seven Daily Report

on:
  schedule:
    # 매일 오전 9시 KST (UTC 0시)
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      force_report:
        description: 'Force generate report'
        required: false
        default: 'false'
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      crawl_mode:
        description: 'Crawling mode (korean/global/all)'
        required: false
        default: 'all'
        type: choice
        options:
          - korean
          - global
          - all

jobs:
  daily-report:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    env:
      TZ: Asia/Seoul
      DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
      DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
      DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
      CRAWL_MODE: ${{ github.event.inputs.crawl_mode || 'all' }}
      FORCE_REPORT: ${{ github.event.inputs.force_report || 'false' }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 🌐 Install Chrome and ChromeDriver (Chrome for Testing 기반)
      run: |
        echo "=== Chrome과 ChromeDriver 설치 시작 ==="
        
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          fonts-liberation \
          libasound2 \
          libatk-bridge2.0-0 \
          libatspi2.0-0 \
          libcups2 \
          libdrm-dev \
          libgbm-dev \
          libglib2.0-0 \
          libnspr4 \
          libnss3 \
          libxcomposite1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxkbcommon0 \
          libxrandr2 \
          libxshmfence6 \
          libxtst6 \
          xdg-utils \
          wget

        INSTALL_SUCCESS=false

        echo "📋 방법 1: Chrome for Testing API 사용 (권장)"
        if chrome_version_output=$(google-chrome --version 2>&1); then
          CURRENT_CHROME_MAJOR_VERSION=$(echo "$chrome_version_output" | sed -E 's/Google Chrome ([0-9]+)\..*/\1/')
          echo "현재 설치된 Chrome Major Version: $CURRENT_CHROME_MAJOR_VERSION"
        else
          CURRENT_CHROME_MAJOR_VERSION=""
          echo "Chrome이 설치되어 있지 않거나 버전을 확인할 수 없습니다. 최신 버전을 시도합니다."
        fi

        if [ -n "$CURRENT_CHROME_MAJOR_VERSION" ]; then
          LATEST_DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['version'])" | \
            awk -F'.' '{print $1}')
          
          if [ -n "$LATEST_DRIVER_VERSION" ]; then
            CHROME_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
              python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chrome-linux'][0]['url'])")
            
            CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
              python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chromedriver-linux64'][0]['url'])")
            
            if [ -n "$CHROME_URL" ] && [ -n "$CHROMEDRIVER_URL" ]; then
              echo "Chrome 다운로드: $CHROME_URL"
              echo "ChromeDriver 다운로드: $CHROMEDRIVER_URL"

              wget -q "$CHROME_URL" -O /tmp/chrome-linux.zip
              sudo unzip -qq /tmp/chrome-linux.zip -d /opt/
              sudo ln -sf /opt/chrome-linux/chrome /usr/local/bin/google-chrome
              sudo chmod +x /usr/local/bin/google-chrome
              
              wget -q "$CHROMEDRIVER_URL" -O /tmp/chromedriver.zip
              sudo unzip -qq /tmp/chromedriver.zip -d /usr/local/bin/
              sudo mv /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
              sudo chmod +x /usr/local/bin/chromedriver

              if google-chrome --version >/dev/null 2>&1 && chromedriver --version >/dev/null 2>&1; then
                echo "✅ 방법 1 성공: Chrome for Testing API를 통한 설치"
                INSTALL_SUCCESS=true
              else
                echo "❌ 방법 1 실패: 설치는 되었으나 버전 확인 실패"
              fi
            else
              echo "❌ 방법 1 실패: Chrome 또는 ChromeDriver URL을 찾을 수 없음"
            fi
          else
            echo "❌ 방법 1 실패: 최신 Chrome Major Version을 찾을 수 없음"
          fi
        else
          echo "현재 Chrome 버전 확인 불가. 강제 설치 시도."
          CHROME_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
              python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chrome-linux'][0]['url'])")
          
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chromedriver-linux64'][0]['url'])")

          if [ -n "$CHROME_URL" ] && [ -n "$CHROMEDRIVER_URL" ]; then
            echo "Chrome 다운로드: $CHROME_URL"
            echo "ChromeDriver 다운로드: $CHROMEDRIVER_URL"

            wget -q "$CHROME_URL" -O /tmp/chrome-linux.zip
            sudo unzip -qq /tmp/chrome-linux.zip -d /opt/
            sudo ln -sf /opt/chrome-linux/chrome /usr/local/bin/google-chrome
            sudo chmod +x /usr/local/bin/google-chrome
            
            wget -q "$CHROMEDRIVER_URL" -O /tmp/chromedriver.zip
            sudo unzip -qq /tmp/chromedriver.zip -d /usr/local/bin/
            sudo mv /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
            sudo chmod +x /usr/local/bin/chromedriver

            if google-chrome --version >/dev/null 2>&1 && chromedriver --version >/dev/null 2>&1; then
              echo "✅ 방법 1 성공: Chrome for Testing API를 통한 설치"
              INSTALL_SUCCESS=true
            else
              echo "❌ 방법 1 실패: 설치는 되었으나 버전 확인 실패"
            fi
          fi
        fi

        if [ "$INSTALL_SUCCESS" != "true" ]; then
          echo "❌ ChromeDriver 설치 최종 실패"
          exit 1
        fi

        echo "🎉 ChromeDriver 설치 완료!"
        google-chrome --version
        chromedriver --version
        echo "경로: $(which chromedriver)"


    - name: 📦 Install Python dependencies
      run: |
        echo "=== Python 의존성 설치 시작 ==="
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Python 의존성 설치 완료"

    - name: ⚙️ Check environment
      run: |
        echo "=== 환경 점검 === "
        echo "Python 버전: $(python --version)"
        echo "Chrome 버전: $(google-chrome --version)"
        echo "ChromeDriver 버전: $(chromedriver --version)"
        echo "현재 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "크롤링 모드: $CRAWL_MODE"
        echo "강제 리포트: $FORCE_REPORT"
        echo "디버그 모드: $DEBUG_MODE"
        if [ -z "$DISCORD_WEBHOOK_REPORT" ]; then echo "⚠️ DISCORD_WEBHOOK_REPORT 환경변수 미설정"; fi
        if [ -z "$DISCORD_WEBHOOK_SENTIMENT" ]; then echo "⚠️ DISCORD_WEBHOOK_SENTIMENT 환경변수 미설정"; fi
        if [ -z "$DISCORD_WEBHOOK_BUG" ]; then echo "⚠️ DISCORD_WEBHOOK_BUG 환경변수 미설정"; fi
        echo "✅ 환경 점검 완료"

    - name: 📊 Pre-report Data Collection
      run: |
        echo "=== 사전 리포트 데이터 수집 시작 === "
        if [ "$DEBUG_MODE" == "true" ]; then
          echo "✅ 디버그 모드 활성화"
        fi
        
        # 기존 sentiment_data.json 백업 (안정성을 위해)
        if [ -f "sentiment_data.json" ]; then
          cp sentiment_data.json sentiment_data_backup.json
          echo "📂 sentiment_data.json 백업 완료"
        fi

        # 일일 리포트용 데이터 수집 및 감성 분류
        python generate_report.py --mode "$CRAWL_MODE" --force_crawl "$FORCE_REPORT" --debug_mode "$DEBUG_MODE"
        
        if [ $? -eq 0 ]; then
          echo "✅ 사전 리포트 데이터 수집 및 감성 분류 완료"
        else
          echo "❌ 사전 리포트 데이터 수집 및 감성 분류 실패"
          exit 1
        fi

    - name: 📝 Generate Report and Send to Discord
      run: |
        echo "=== 리포트 생성 및 전송 === "
        python generate_report.py
        if [ $? -eq 0 ]; then
          echo "✅ 일일 리포트 생성 및 전송 완료"
        else
          echo "❌ 일일 리포트 생성 및 전송 실패"
          exit 1
        fi

    - name: 💾 Commit and Push Report Data
      if: success()
      run: |
        echo "=== 리포트 데이터 커밋 및 푸시 === "
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet --exit-code; then
          echo "변경사항 없음. 스킵합니다."
        else
          git add sentiment_data.json crawled_links_korean.json crawled_links_global.json daily_report_data.json content_cache_korean.json content_cache_global.json
          git commit -m "📊 Daily Report Update: $(date '+%Y-%m-%d %H:%M')" || echo "커밋할 변경사항 없음"
          
          # 3번 재시도
          for i in 1 2 3; do
            if git push origin main; then
              echo "✅ Git 푸시 성공"
              break
            else
              echo "❌ Git 푸시 실패, 재시도 중..."
              git pull --rebase origin main
              sleep 5
            fi
          done
        fi
        
        echo "✅ 리포트 데이터 커밋 완료"

    - name: 🔄 Cleanup and Restore
      if: always()
      run: |
        echo "=== 정리 및 복원 === "
        
        # 임시 파일 정리
        rm -f /tmp/chromedriver.zip
        rm -rf /usr/local/bin/chromedriver-linux64/ # 변경된 경로 처리
        rm -f /tmp/chrome-linux.zip
        rm -rf /opt/chrome-linux/
        rm -f daily_report_data.json
        
        # 백업 파일 복원
        if [ -f "sentiment_data_backup.json" ]; then
          if [ ! -f "sentiment_data.json" ]; then
            mv sentiment_data_backup.json sentiment_data.json
            echo "📂 sentiment_data.json 복원"
          else
            rm -f sentiment_data_backup.json
          fi
        fi
        
        echo "✅ 정리 및 복원 완료"

    - name: 📈 Final Report Summary
      if: always()
      run: |
        echo "=== 최종 리포트 요약 === "
        echo "📅 실행 날짜: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "🎯 크롤링 모드: $CRAWL_MODE"
        echo "📊 리포트 생성 완료!"
        echo "==========================================="