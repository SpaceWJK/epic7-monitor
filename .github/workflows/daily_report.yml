name: Epic7 Daily Report

on:
  schedule:
    - cron: "0 9 * * *"  # 매일 오전 9시 실행
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      report_period:
        description: 'Report period in hours'
        required: false
        default: '24'
        type: choice
        options:
          - '12'
          - '24'
          - '48'

jobs:
  daily-report:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      TZ: Asia/Seoul
      DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      REPORT_PERIOD: ${{ github.event.inputs.report_period || '24' }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🌐 Install Chrome and ChromeDriver (Chrome 138 호환)
        run: |
          echo "=== Chrome 및 ChromeDriver 설치 (Chrome 138 호환) ==="
          
          # Chrome 설치
          sudo apt-get update -y
          sudo apt-get install -y google-chrome-stable
          
          # Chrome 버전 확인
          CHROME_VERSION=$(google-chrome --version | sed 's/.*Chrome \([0-9\.]*\).*/\1/')
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
          echo "✅ Chrome 버전: $CHROME_VERSION (Major: $CHROME_MAJOR_VERSION)"
          
          # ChromeDriver 설치 (3단계 폴백 방식)
          echo "=== ChromeDriver 설치 시작 ==="
          INSTALL_SUCCESS=false
          
          # 방법 1: Chrome for Testing API 사용 (권장)
          echo "🔄 방법 1: Chrome for Testing API 사용"
          if curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | grep -q "chromedriver"; then
            # 최신 stable 버전 URL 획득
            CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json" | \
              python3 -c "import sys, json; data=json.load(sys.stdin); print(data['channels']['Stable']['downloads']['chromedriver'][0]['url'])" 2>/dev/null || echo "")
            
            if [ -n "$CHROMEDRIVER_URL" ] && [ "$CHROMEDRIVER_URL" != "null" ]; then
              echo "🔗 ChromeDriver URL: $CHROMEDRIVER_URL"
              wget -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL"
              
              if [ -f "/tmp/chromedriver.zip" ] && [ -s "/tmp/chromedriver.zip" ]; then
                sudo unzip -o /tmp/chromedriver.zip -d /tmp/
                sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver 2>/dev/null || \
                sudo mv /tmp/chromedriver /usr/local/bin/chromedriver
                sudo chmod +x /usr/local/bin/chromedriver
                
                if chromedriver --version >/dev/null 2>&1; then
                  echo "✅ 방법 1 성공: ChromeDriver 설치 완료"
                  INSTALL_SUCCESS=true
                fi
              fi
            fi
          fi
          
          # 방법 2: 직접 다운로드 (GitHub Release)
          if [ "$INSTALL_SUCCESS" != "true" ]; then
            echo "🔄 방법 2: GitHub Release 직접 다운로드"
            
            # Chrome 버전에 맞는 ChromeDriver 버전 찾기
            case $CHROME_MAJOR_VERSION in
              "138"|"139"|"140")
                CHROMEDRIVER_VERSION="138.0.6993.88"
                ;;
              "137")
                CHROMEDRIVER_VERSION="137.0.6916.107"
                ;;
              "136")
                CHROMEDRIVER_VERSION="136.0.6877.63"
                ;;
              *)
                CHROMEDRIVER_VERSION="138.0.6993.88"  # 기본값
                ;;
            esac
            
            echo "🎯 ChromeDriver 버전: $CHROMEDRIVER_VERSION"
            
            # 여러 다운로드 URL 시도
            DOWNLOAD_URLS=(
              "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
              "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
              "https://github.com/GoogleChromeLabs/chrome-for-testing/releases/download/$CHROMEDRIVER_VERSION/chromedriver-linux64.zip"
            )
            
            for url in "${DOWNLOAD_URLS[@]}"; do
              echo "🔗 시도: $url"
              if wget -q -O /tmp/chromedriver.zip "$url"; then
                if [ -f "/tmp/chromedriver.zip" ] && [ -s "/tmp/chromedriver.zip" ]; then
                  sudo unzip -o /tmp/chromedriver.zip -d /tmp/
                  sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver 2>/dev/null || \
                  sudo mv /tmp/chromedriver /usr/local/bin/chromedriver
                  sudo chmod +x /usr/local/bin/chromedriver
                  
                  if chromedriver --version >/dev/null 2>&1; then
                    echo "✅ 방법 2 성공: ChromeDriver 다운로드 완료"
                    INSTALL_SUCCESS=true
                    break
                  fi
                fi
              fi
            done
          fi
          
          # 방법 3: 패키지 매니저 사용 (최후 수단)
          if [ "$INSTALL_SUCCESS" != "true" ]; then
            echo "🔄 방법 3: 패키지 매니저 사용"
            
            # apt 패키지 시도
            sudo apt-get update -y
            sudo apt-get install -y chromium-chromedriver 2>/dev/null || true
            
            if [ -f "/usr/bin/chromedriver" ]; then
              sudo ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver
              sudo chmod +x /usr/local/bin/chromedriver
              
              if chromedriver --version >/dev/null 2>&1; then
                echo "✅ 방법 3 성공: APT ChromeDriver 설치"
                INSTALL_SUCCESS=true
              fi
            fi
          fi
          
          # 설치 결과 확인
          if [ "$INSTALL_SUCCESS" = "true" ]; then
            echo "🎉 ChromeDriver 설치 완료!"
            echo "📋 Chrome 버전: $(google-chrome --version)"
            echo "📋 ChromeDriver 버전: $(chromedriver --version)"
            echo "📋 ChromeDriver 경로: $(which chromedriver)"
          else
            echo "❌ ChromeDriver 설치 실패"
            echo "🔍 시스템 정보:"
            echo "   - Chrome: $(google-chrome --version)"
            echo "   - 시스템: $(uname -a)"
            echo "   - 아키텍처: $(dpkg --print-architecture)"
            exit 1
          fi
          
          # 임시 파일 정리
          rm -f /tmp/chromedriver.zip
          rm -rf /tmp/chromedriver-linux64/
          
          echo "✅ Chrome 및 ChromeDriver 설치 완료"

      - name: 📦 Install dependencies
        run: |
          echo "=== Python 의존성 설치 시작 ==="
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, installing basic dependencies"
            pip install requests beautifulsoup4 selenium lxml deep-translator python-dateutil
          fi
          echo "✅ Python dependencies installed"

      - name: 📊 Generate daily report
        run: |
          echo "=== 일일 리포트 생성 시작 ==="
          echo "리포트 기간: $REPORT_PERIOD 시간"
          echo "생성 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 리포트 생성 스크립트 실행
          if [ -f "generate_report.py" ]; then
            python generate_report.py --period $REPORT_PERIOD --debug $DEBUG_MODE
          else
            echo "⚠️ generate_report.py 파일이 없습니다. 기본 리포트를 생성합니다."
            
            # 기본 리포트 생성
            cat > daily_report.md << EOF
            # Epic7 일일 리포트
            
            **생성 시간:** $(date '+%Y-%m-%d %H:%M:%S')
            **리포트 기간:** $REPORT_PERIOD 시간
            
            ## 📊 시스템 상태
            - 시스템 상태: 정상 작동
            - 마지막 크롤링: $(date '+%Y-%m-%d %H:%M:%S')
            
            ## 📁 데이터 파일 상태
            EOF
            
            # JSON 파일 정보 추가
            for file in crawled_links*.json; do
              if [ -f "$file" ]; then
                echo "- $file: ✅ 존재 (크기: $(stat -c%s "$file") bytes)" >> daily_report.md
              fi
            done
            
            echo "" >> daily_report.md
            echo "## 🎯 요약" >> daily_report.md
            echo "일일 리포트가 정상적으로 생성되었습니다." >> daily_report.md
          fi
          
          echo "✅ 일일 리포트 생성 완료"

      - name: 📤 Upload daily report
        uses: actions/upload-artifact@v4
        with:
          name: daily-report-${{ github.run_number }}
          path: |
            daily_report.md
            *.json
            *.log
          retention-days: 7

      - name: 📢 Send Discord daily report
        if: always()
        run: |
          echo "📡 Discord 일일 리포트 전송"
          
          # 실행 상태 확인
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI="📊"
            STATUS_TEXT="성공"
            STATUS_COLOR="3066993"
          else
            STATUS_EMOJI="❌"
            STATUS_TEXT="실패"
            STATUS_COLOR="15158332"
          fi
          
          # JSON 파일 개수 확인
          JSON_COUNT=$(find . -name "crawled_links*.json" | wc -l)
          
          # Discord 메시지 생성
          DISCORD_MESSAGE=$(cat << EOF
          {
            "embeds": [
              {
                "title": "${STATUS_EMOJI} Epic7 일일 리포트",
                "description": "${REPORT_PERIOD}시간 동안의 모니터링 결과입니다.",
                "color": ${STATUS_COLOR},
                "fields": [
                  {
                    "name": "📅 리포트 기간",
                    "value": "${REPORT_PERIOD}시간",
                    "inline": true
                  },
                  {
                    "name": "📊 생성 시간",
                    "value": "$(date '+%Y-%m-%d %H:%M:%S')",
                    "inline": true
                  },
                  {
                    "name": "📁 데이터 파일",
                    "value": "${JSON_COUNT}개의 JSON 파일",
                    "inline": true
                  },
                  {
                    "name": "🖥️ 시스템 상태",
                    "value": "정상 작동",
                    "inline": true
                  },
                  {
                    "name": "💾 메모리 사용량",
                    "value": "$(free -h | grep Mem | awk '{print $3 "/" $2}')",
                    "inline": true
                  },
                  {
                    "name": "🔧 Chrome 버전",
                    "value": "$(google-chrome --version 2>/dev/null | cut -d' ' -f3 || echo 'N/A')",
                    "inline": true
                  }
                ],
                "footer": {
                  "text": "Epic7 모니터링 시스템 - 일일 리포트"
                },
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
              }
            ]
          }
          EOF
          )
          
          # Discord Webhook 전송
          if [ ! -z "$DISCORD_WEBHOOK_REPORT" ]; then
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "$DISCORD_MESSAGE" \
                 "$DISCORD_WEBHOOK_REPORT" || echo "Discord 알림 전송 실패"
          else
            echo "DISCORD_WEBHOOK_REPORT 환경변수가 설정되지 않음"
          fi

      - name: 🔄 Cleanup
        if: always()
        run: |
          echo "=== 정리 작업 시작 ==="
          
          # 임시 파일 정리
          rm -f /tmp/chromedriver.zip
          rm -rf /tmp/chromedriver-linux64/
          
          echo "✅ 정리 완료"
          echo "=========================================="
          echo "   Epic7 일일 리포트 완료"
          echo "=========================================="
          echo "📊 리포트 기간: $REPORT_PERIOD 시간"
          echo "⏰ 완료 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "✅ 일일 리포트가 생성되었습니다."
          echo "=========================================="