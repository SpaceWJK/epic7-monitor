name: 🌐 Bug Monitor Global Sites

on:
  schedule:
    - cron: '*/30 * * * *'  # 30분마다 실행
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Enable test mode'
        required: false
        default: false
        type: boolean
  workflow_call: # 다른 워크플로우에서 호출될 수 있도록 추가
    inputs:
      debug_mode:
        required: false
        type: boolean
        default: false
      test_mode:
        required: false
        type: boolean
        default: false

jobs:
  monitor-global-sites:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      TZ: Asia/Seoul
      DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
      DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
      DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}


    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 🌐 Install Chrome and ChromeDriver (Chrome for Testing 기반)
      run: |
        echo "=== Chrome과 ChromeDriver 설치 시작 ==="
        
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          fonts-liberation \
          libasound2 \
          libatk-bridge2.0-0 \
          libatspi2.0-0 \
          libcups2 \
          libdrm-dev \
          libgbm-dev \
          libglib2.0-0 \
          libnspr4 \
          libnss3 \
          libxcomposite1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxkbcommon0 \
          libxrandr2 \
          libxshmfence6 \
          libxtst6 \
          xdg-utils \
          wget

        INSTALL_SUCCESS=false

        echo "📋 방법 1: Chrome for Testing API 사용 (권장)"
        if chrome_version_output=$(google-chrome --version 2>&1); then
          CURRENT_CHROME_MAJOR_VERSION=$(echo "$chrome_version_output" | sed -E 's/Google Chrome ([0-9]+)\..*/\1/')
          echo "현재 설치된 Chrome Major Version: $CURRENT_CHROME_MAJOR_VERSION"
        else
          CURRENT_CHROME_MAJOR_VERSION=""
          echo "Chrome이 설치되어 있지 않거나 버전을 확인할 수 없습니다. 최신 버전을 시도합니다."
        fi

        if [ -n "$CURRENT_CHROME_MAJOR_VERSION" ]; then
          LATEST_DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['version'])" | \
            awk -F'.' '{print $1}')
          
          if [ -n "$LATEST_DRIVER_VERSION" ]; then
            CHROME_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
              python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chrome-linux'][0]['url'])")
            
            CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
              python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chromedriver-linux64'][0]['url'])")
            
            if [ -n "$CHROME_URL" ] && [ -n "$CHROMEDRIVER_URL" ]; then
              echo "Chrome 다운로드: $CHROME_URL"
              echo "ChromeDriver 다운로드: $CHROMEDRIVER_URL"

              wget -q "$CHROME_URL" -O /tmp/chrome-linux.zip
              sudo unzip -qq /tmp/chrome-linux.zip -d /opt/
              sudo ln -sf /opt/chrome-linux/chrome /usr/local/bin/google-chrome
              sudo chmod +x /usr/local/bin/google-chrome
              
              wget -q "$CHROMEDRIVER_URL" -O /tmp/chromedriver.zip
              sudo unzip -qq /tmp/chromedriver.zip -d /usr/local/bin/
              sudo mv /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
              sudo chmod +x /usr/local/bin/chromedriver

              if google-chrome --version >/dev/null 2>&1 && chromedriver --version >/dev/null 2>&1; then
                echo "✅ 방법 1 성공: Chrome for Testing API를 통한 설치"
                INSTALL_SUCCESS=true
              else
                echo "❌ 방법 1 실패: 설치는 되었으나 버전 확인 실패"
              fi
            else
              echo "❌ 방법 1 실패: Chrome 또는 ChromeDriver URL을 찾을 수 없음"
            fi
          else
            echo "❌ 방법 1 실패: 최신 Chrome Major Version을 찾을 수 없음"
          fi
        else
          echo "현재 Chrome 버전 확인 불가. 강제 설치 시도."
          CHROME_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
              python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chrome-linux'][0]['url'])")
          
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-int.json" | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['channels']['Stable']['downloads']['chromedriver-linux64'][0]['url'])")

          if [ -n "$CHROME_URL" ] && [ -n "$CHROMEDRIVER_URL" ]; then
            echo "Chrome 다운로드: $CHROME_URL"
            echo "ChromeDriver 다운로드: $CHROMEDRIVER_URL"

            wget -q "$CHROME_URL" -O /tmp/chrome-linux.zip
            sudo unzip -qq /tmp/chrome-linux.zip -d /opt/
            sudo ln -sf /opt/chrome-linux/chrome /usr/local/bin/google-chrome
            sudo chmod +x /usr/local/bin/google-chrome
            
            wget -q "$CHROMEDRIVER_URL" -O /tmp/chromedriver.zip
            sudo unzip -qq /tmp/chromedriver.zip -d /usr/local/bin/
            sudo mv /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
            sudo chmod +x /usr/local/bin/chromedriver

            if google-chrome --version >/dev/null 2>&1 && chromedriver --version >/dev/null 2>&1; then
              echo "✅ 방법 1 성공: Chrome for Testing API를 통한 설치"
              INSTALL_SUCCESS=true
            else
              echo "❌ 방법 1 실패: 설치는 되었으나 버전 확인 실패"
            fi
          fi
        fi

        if [ "$INSTALL_SUCCESS" != "true" ]; then
          echo "❌ ChromeDriver 설치 최종 실패"
          exit 1
        fi

        echo "🎉 ChromeDriver 설치 완료!"
        google-chrome --version
        chromedriver --version
        echo "경로: $(which chromedriver)"

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🌐 글로벌 사이트 모니터링 실행
      run: |
        echo "=== 글로벌 사이트 모니터링 시작 ==="
        echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "ARGS: --mode global --debug ${{ env.DEBUG_MODE == 'true' && '--debug' || '' }} ${{ env.TEST_MODE == 'true' && '--test' || '' }}"
        python monitor_bugs.py --mode global ${{ env.DEBUG_MODE == 'true' && '--debug' || '' }} ${{ env.TEST_MODE == 'true' && '--test' || '' }}
        echo "완료"

    - name: 📊 결과 업로드
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: global-monitor-results
        path: |
          *.json
          *.html
          *.log
        retention-days: 7

    - name: 📤 Discord 알림 전송
      if: failure() && env.DISCORD_WEBHOOK_BUG
      run: |
        if [ ! -z "$DISCORD_WEBHOOK_BUG" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"embeds\":[{\"title\":\"❌ 글로벌 버그 모니터링 실패\",\"description\":\"글로벌 버그 모니터링 워크플로우에 오류가 발생했습니다. 자세한 내용은 GitHub Actions 로그를 확인해주세요.\",\"color\":15548997,\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"}]}" \
               ${{ secrets.DISCORD_WEBHOOK_BUG }}
        fi
      
    - name: 🔄 Cleanup
      if: always()
      run: |
        echo "=== 정리 === "
        rm -f /tmp/chromedriver.zip
        rm -rf /usr/local/bin/chromedriver-linux64/
        rm -f /tmp/chrome-linux.zip
        rm -rf /opt/chrome-linux/
        echo "✅ 정리 완료"