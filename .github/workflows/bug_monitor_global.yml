name: 🌐 Epic7 Global Sites Monitor

on:
  schedule:
    # 15분마다 글로벌 사이트 모니터링 (표준 15분 주기)
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '🔍 Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      force_crawl:
        description: '🔄 Force crawl (ignore cache)'
        required: false
        default: 'false'
        type: boolean

env:
  TZ: Asia/Seoul
  PYTHONUNBUFFERED: 1
  EXECUTION_LOCK_FILE: "global_monitor_running.lock"

jobs:
  global-sites-monitor:
    name: 🌐 글로벌 사이트 모니터링
    runs-on: ubuntu-latest
    timeout-minutes: 35

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🔒 Check Execution Status
        id: status_check
        run: |
          echo "🔍 글로벌 모니터 실행 상태 체크..."
          
          if [ -f "$EXECUTION_LOCK_FILE" ]; then
            lock_time=$(cat $EXECUTION_LOCK_FILE)
            current_time=$(date +%s)
            time_diff=$((current_time - lock_time))
            
            if [ $time_diff -gt 2100 ]; then
              echo "⚠️ 실행 락이 35분 이상 유지됨 - 비정상 종료로 간주하여 락 해제"
              rm -f "$EXECUTION_LOCK_FILE"
              echo "can_execute=true" >> $GITHUB_OUTPUT
            else
              echo "🔄 다른 글로벌 모니터 인스턴스가 실행 중... ($(($time_diff/60))분 경과)"
              echo "can_execute=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "✅ 실행 가능 상태"
            echo $(date +%s) > "$EXECUTION_LOCK_FILE"
            echo "can_execute=true" >> $GITHUB_OUTPUT
          fi

      - name: 🐍 Setup Python 3.11
        if: steps.status_check.outputs.can_execute == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🌐 Install Chrome and ChromeDriver
        if: steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "🌐 Chrome과 ChromeDriver 설치 중..."
          
          # Chrome 설치
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # ChromeDriver 설치
          CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
          wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          
          echo "✅ Chrome과 ChromeDriver 설치 완료"
          google-chrome --version
          chromedriver --version

      - name: 📦 Install Dependencies
        if: steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "📦 Python 의존성 설치 중..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ 의존성 설치 완료"

      - name: 🌐 Execute Global Sites Monitoring
        if: steps.status_check.outputs.can_execute == 'true'
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
          DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
          # Reddit API 환경변수
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
          DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
          FORCE_CRAWL: ${{ github.event.inputs.force_crawl || 'false' }}
        run: |
          echo "🌐 글로벌 사이트 모니터링 시작..."
          echo "⏰ 실행 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🎯 대상: STOVE Global, Reddit"
          
          # 플래그 설정
          debug_flag=""
          force_flag=""
          
          if [ "$DEBUG_MODE" = "true" ]; then
            debug_flag="--debug"
          fi
          
          if [ "$FORCE_CRAWL" = "true" ]; then
            force_flag="--force-crawl"
          fi
          
          # 글로벌 사이트 모니터링 실행
          python monitor_bugs.py --schedule 15min --mode global $debug_flag $force_flag
          
          echo "✅ 글로벌 사이트 모니터링 완료"

      - name: 📊 Execution Summary
        if: steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "📊 글로벌 모니터링 실행 요약"
          echo "════════════════════════════════════════"
          echo "⏰ 시작 시간: ${{ env.START_TIME }}"
          echo "⏰ 종료 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🌐 모드: Global Sites Only"
          echo "🎯 대상 사이트: STOVE Global Bug/General, Reddit"
          echo "🔄 스케줄: 15분 주기 (0,15,30,45분)"
          echo "════════════════════════════════════════"
          
          # 실행 결과 파일이 있다면 표시
          if [ -f "execution_summary.txt" ]; then
            echo "📋 상세 실행 결과:"
            cat execution_summary.txt
          fi

      - name: 💾 Commit Changes
        if: steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "💾 변경사항 커밋 중..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 변경된 파일이 있는지 확인
          if git diff --quiet && git diff --staged --quiet; then
            echo "📝 커밋할 변경사항이 없습니다."
          else
            git add .
            git commit -m "🌐 Global monitoring: $(date '+%Y-%m-%d %H:%M:%S')" || echo "커밋할 변경사항이 없습니다."
            git push || echo "푸시할 변경사항이 없습니다."
            echo "✅ 변경사항 커밋 완료"
          fi

      - name: 🔓 Release Lock
        if: always() && steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "🔓 실행 락 해제 중..."
          rm -f "$EXECUTION_LOCK_FILE"
          echo "✅ 실행 락 해제 완료"

  failure-notification:
    name: 📧 실패 알림
    runs-on: ubuntu-latest
    needs: global-sites-monitor
    if: failure()
    
    steps:
      - name: 📧 Send Failure Notification
        run: |
          echo "📧 Discord 실패 알림 전송 중..."
          
          if [ -n "${{ secrets.DISCORD_WEBHOOK_BUG }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_BUG }}" \
              -H "Content-Type: application/json" \
              -d '{
                "username": "Epic7 Global Monitor Alert",
                "avatar_url": "https://cdn.discordapp.com/emojis/🚨.png",
                "embeds": [{
                  "title": "🚨 글로벌 사이트 모니터링 실패",
                  "description": "Epic7 글로벌 사이트 모니터링 워크플로우가 실패했습니다.",
                  "color": 16711680,
                  "fields": [
                    {
                      "name": "⏰ 실패 시간",
                      "value": "'"$(date '+%Y-%m-%d %H:%M:%S %Z')"'",
                      "inline": true
                    },
                    {
                      "name": "🔗 워크플로우",
                      "value": "[실행 로그 확인](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                      "inline": true
                    },
                    {
                      "name": "⏰ 다음 실행",
                      "value": "'"$(date -d '+15 minutes' '+%H:%M')"'",
                      "inline": true
                    }
                  ]
                }]
              }' \
             "$DISCORD_WEBHOOK_BUG"
          fi