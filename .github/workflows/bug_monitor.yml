name: 🎮 Epic Seven Bug Monitor (Integrated v3.1)

on:
  schedule:
    # 15분마다 실행 (기존 기능 보존)
    - cron: "*/15 * * * *"

  workflow_dispatch:
    inputs:
      debug_mode:
        description: '🔍 Enable debug mode for detailed logging'
        required: false
        default: 'false'
        type: boolean
      force_crawl:
        description: '🔄 Force crawl (ignore cache)'
        required: false
        default: 'false'
        type: boolean

env:
  TZ: Asia/Seoul
  PYTHONUNBUFFERED: 1

jobs:
  integrated-monitor:
    name: 🌐 Integrated Epic7 Monitor
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🔧 Install Chrome & ChromeDriver
        run: |
          # Chrome 138+ 호환성을 위한 3단계 폴백 설치
          echo "🌐 Installing Chrome and ChromeDriver..."

          # Stage 1: Chrome for Testing API
          CHROME_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json | jq -r '.channels.Stable.version')
          echo "Latest Chrome version: $CHROME_VERSION"

          # Chrome 설치
          wget -q https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chrome-linux64.zip
          unzip -q chrome-linux64.zip
          sudo mv chrome-linux64 /opt/chrome
          sudo ln -sf /opt/chrome/chrome /usr/local/bin/chrome

          # ChromeDriver 설치
          wget -q https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip
          unzip -q chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

          # 설치 확인
          chrome --version
          chromedriver --version

      - name: 📦 Install Python Dependencies
        run: |
          echo "📦 Installing Python packages..."
          pip install --upgrade pip
          pip install -r requirements.txt --quiet

          # 핵심 패키지 버전 확인
          echo "🔍 Package versions:"
          pip show selenium requests beautifulsoup4 deep-translator

      - name: 🚀 Run Integrated Epic7 Monitoring
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
          DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
          DEBUG_MODE: ${{ inputs.debug_mode || 'false' }}
          FORCE_CRAWL: ${{ inputs.force_crawl || 'false' }}
        run: |
          echo "🎮 Starting Epic7 Integrated Monitoring..."
          echo "⚙️ Debug Mode: $DEBUG_MODE"
          echo "🔄 Force Crawl: $FORCE_CRAWL"
          echo "⏰ Execution Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"

          # monitor_bugs.py를 메인 엔트리 포인트로 실행
          # --mode all: 한국 + 글로벌 사이트 모두 크롤링
          python monitor_bugs.py \
            --mode all \
            --debug $DEBUG_MODE \
            --force-crawl $FORCE_CRAWL

      - name: 📊 Monitor Execution Summary
        if: always()
        run: |
          echo "📊 === Epic7 Monitor Execution Summary ==="
          echo "🕐 Completed at: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🔧 Debug Mode: ${{ inputs.debug_mode || 'false' }}"
          echo "🔄 Force Crawl: ${{ inputs.force_crawl || 'false' }}"
          echo "🌐 Mode: Integrated (Korean + Global)"

          # 실행 결과 파일 확인
          echo "📁 Generated Files:"
          ls -la *.json *.html *.log 2>/dev/null || echo "No output files found"

          # 메모리 및 시스템 상태
          echo "💾 System Status:"
          free -h
          df -h /

      - name: 🔄 Commit and Push Changes
        if: success()
        run: |
          # Git 설정
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # 변경사항이 있는 경우에만 커밋
          if [[ -n $(git status --porcelain) ]]; then
            echo "📝 Committing monitoring results..."
            git add *.json *.html *.log 2>/dev/null || true
            git commit -m "🤖 Epic7 Monitor: $(date '+%Y-%m-%d %H:%M:%S')" || true
            git push || echo "⚠️ Push failed - continuing..."
          else
            echo "✅ No changes to commit"
          fi

      - name: 📤 Upload Debug Artifacts
        if: inputs.debug_mode == 'true' || failure()
        uses: actions/upload-artifact@v4
        with:
          name: epic7-monitor-debug-${{ github.run_number }}
          path: |
            *.html
            *.log
            *.json
          retention-days: 7

      - name: 🚨 Failure Notification
        if: failure()
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        run: |
          if [[ -n "$DISCORD_WEBHOOK_BUG" ]]; then
            curl -H "Content-Type: application/json" \
                 -d '{
                   "embeds": [{
                     "title": "🚨 Epic7 Monitor Failed",
                     "description": "Integrated monitoring workflow failed",
                     "color": 15158332,
                     "fields": [
                       {"name": "🕐 Time", "value": "'$(date '+%Y-%m-%d %H:%M:%S %Z')'", "inline": true},
                       {"name": "🔧 Debug", "value": "'${{ inputs.debug_mode || 'false' }}'", "inline": true},
                       {"name": "🔗 Run", "value": "[View Details]('${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}')", "inline": false}
                     ],
                     "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                   }]
                 }' \
                 "$DISCORD_WEBHOOK_BUG"
          fi
