name: Epic Seven Bug Monitor

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      mode:
        description: 'Monitor mode (korean/all)'
        required: false
        default: 'korean'
        type: choice
        options:
          - korean
          - all
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      TZ: Asia/Seoul

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Sync with remote
        run: |
          git config --global user.email "epic7-monitor@github.com"
          git config --global user.name "Epic7 Monitor Bot"

          echo "=== Git 동기화 시작 ==="
          git fetch origin main

          if ! git diff --quiet HEAD origin/main; then
            echo "원격에 변경사항 있음, 동기화 진행"
            git stash push -m "Auto-stash $(date)"
            git reset --hard origin/main
            if git stash list | grep -q "Auto-stash"; then
              git stash pop || {
                echo "충돌 발생, 강제 초기화"
                git reset --hard HEAD
                git clean -fd
              }
            fi
          fi

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🌐 Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          echo "✅ Chrome: $(google-chrome --version)"

      - name: 📦 Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Python packages installed"

      - name: 🔍 Determine execution mode
        id: mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            MODE="${{ github.event.inputs.mode }}"
            DEBUG="${{ github.event.inputs.debug_mode }}"
          else
            MODE="korean"
            DEBUG="false"
          fi
          echo "MODE=$MODE" >> $GITHUB_ENV
          echo "DEBUG=$DEBUG" >> $GITHUB_ENV
          echo "실행 모드: $MODE, 디버그: $DEBUG"

      - name: 🚀 Run Epic7 Bug Monitor
        run: |
          ARGS="--mode $MODE"
          if [ "$DEBUG" = "true" ]; then
            ARGS="$ARGS --debug"
            echo "🐛 디버그 모드로 실행"
          fi
          python monitor_bugs.py $ARGS
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
          DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
          DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
          PYTHONUNBUFFERED: 1

      - name: 📊 Upload debug files
        if: env.DEBUG == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: debug-files-${{ github.run_number }}
          path: |
            *_debug_selenium.html
            *_error_debug.html
            crawled_links.json
          retention-days: 7

      - name: 💾 Smart Git Commit
        run: |
          git config --global user.email "epic7-monitor@github.com"
          git config --global user.name "Epic7 Monitor Bot"

          git add -A
          if git diff --staged --quiet; then
            echo "변경 사항 없음"
          else
            echo "변경 사항 커밋"
            COMMIT_MSG="🔍 Epic7 Monitor Update - $MODE - $(date '+%Y-%m-%d %H:%M KST')"
            if [ "$DEBUG" = "true" ]; then
              COMMIT_MSG="$COMMIT_MSG (DEBUG)"
            fi
            git commit -m "$COMMIT_MSG"

            for i in {1..3}; do
              if git push; then
                echo "Git push 성공"
                break
              else
                echo "Git push 실패, 재시도 ($i/3)"
                git pull --rebase origin main || git reset --hard origin/main
                sleep 5
              fi
            done
          fi

      - name: 📈 Report status
        if: always()
        run: |
          echo "=== 워크플로우 상태 ==="
          echo "작업 상태: ${{ job.status }}"
          echo "모드: $MODE"
          echo "디버그: $DEBUG"
          echo "워크플로우 번호: ${{ github.run_number }}"
          echo "실행 ID: ${{ github.run_id }}"
          if [ -f "crawled_links.json" ]; then
            echo "저장된 링크 수: $(jq '.links | length' crawled_links.json 2>/dev/null || echo 0)"
            echo "마지막 업데이트: $(jq -r '.last_updated' crawled_links.json 2>/dev/null || echo N/A)"
          fi