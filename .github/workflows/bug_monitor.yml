name: 🎮 Epic Seven Bug Monitor v5.0

on:
  schedule:
    # 🚀 v5.0 신규: 30분 통합 스케줄 (매시 30분)
    - cron: "30 * * * *"  # 매시 30분에 실행 (실시간 처리 시스템)

  workflow_dispatch:
    inputs:
      debug_mode:
        description: '🔍 Enable debug mode for detailed logging'
        required: false
        default: 'false'
        type: boolean
      force_crawl:
        description: '🔄 Force crawl (ignore cache)'
        required: false
        default: 'false'
        type: boolean
      execution_timeout:
        description: '⏱️ Execution timeout in minutes'
        required: false
        default: '45'
        type: choice
        options:
          - '30'
          - '45'
          - '60'

env:
  TZ: Asia/Seoul
  PYTHONUNBUFFERED: 1
  EXECUTION_LOCK_FILE: "epic7_monitor_running.lock"

jobs:
  # 🚀 v5.0 신규: 통합 모니터링 Job (30분 스케줄)
  unified-monitor-v5:
    name: 🎮 Epic Seven Unified Monitor v5.0
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.execution_timeout || '45') }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🔒 Check Execution Status
        id: status_check
        run: |
          echo "🔍 실행 상태 체크 시작..."
          
          # 실행 중인지 확인
          if [ -f "$EXECUTION_LOCK_FILE" ]; then
            lock_time=$(cat $EXECUTION_LOCK_FILE)
            current_time=$(date +%s)
            time_diff=$((current_time - lock_time))
            
            # 2시간(7200초) 이상 지났으면 오래된 락 파일로 간주
            if [ $time_diff -gt 7200 ]; then
              echo "⚠️ 오래된 락 파일 발견 ($time_diff초) - 제거 후 계속 진행"
              rm -f $EXECUTION_LOCK_FILE
              echo "can_execute=true" >> $GITHUB_OUTPUT
            else
              echo "⏸️ 이전 실행이 진행 중입니다 ($time_diff초 경과) - 대기"
              echo "can_execute=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "✅ 실행 가능 상태"
            echo "can_execute=true" >> $GITHUB_OUTPUT
          fi
          
          # 실행 락 파일 생성
          echo $(date +%s) > $EXECUTION_LOCK_FILE
          echo "🔒 실행 락 파일 생성: $EXECUTION_LOCK_FILE"

      - name: 🐍 Setup Python 3.11
        if: steps.status_check.outputs.can_execute == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🔧 Install Chrome & ChromeDriver
        if: steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "🌐 Installing Chrome and ChromeDriver for v5.0..."
          
          # Chrome 설치 (최신 안정 버전)
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # ChromeDriver 설치 (Chrome 버전과 매칭)
          CHROME_VERSION=$(google-chrome --version | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
          echo "🔍 Chrome version: $CHROME_VERSION"
          
          # ChromeDriver 다운로드 및 설치
          wget -q "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip" -O chromedriver.zip
          unzip -q chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          
          # 임시 파일 정리
          rm -rf chromedriver.zip chromedriver-linux64
          
          # 설치 확인
          echo "✅ Chrome: $(google-chrome --version)"
          echo "✅ ChromeDriver: $(chromedriver --version)"

      - name: 📦 Install Python Dependencies
        if: steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "📦 Installing Python dependencies for v5.0..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt --quiet
          
          echo "🔍 Key package versions:"
          pip show selenium requests beautifulsoup4 deep-translator | grep -E "Name|Version"

      - name: 🚀 Execute Epic Seven Monitor v5.0
        if: steps.status_check.outputs.can_execute == 'true'
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
          DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
          DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
          # Reddit API 환경변수
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
          # 실행 옵션
          DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
          FORCE_CRAWL: ${{ github.event.inputs.force_crawl || 'false' }}
        run: |
          echo "🚀 Starting Epic Seven Monitor v5.0..."
          echo "⚙️ Debug Mode: $DEBUG_MODE"
          echo "🔄 Force Crawl: $FORCE_CRAWL" 
          echo "⏰ Execution Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🎯 Mode: 30분 통합 스케줄 (즉시 처리 시스템)"
          
          # 실행 플래그 설정
          debug_flag=""
          force_flag=""
          
          if [ "$DEBUG_MODE" = "true" ]; then
            debug_flag="--debug"
            echo "🔍 디버그 모드 활성화"
          fi
          
          if [ "$FORCE_CRAWL" = "true" ]; then
            force_flag="--force-crawl"
            echo "🔄 강제 크롤링 모드 활성화"
          fi
          
          # 🚀 v5.0 신규: 30분 통합 모드 실행
          echo "🎮 Running v5.0: 게시글별 즉시 처리 (크롤링→감성분석→알림→저장)"
          python monitor_bugs.py --schedule 30min $debug_flag $force_flag
          
          echo "✅ Epic Seven Monitor v5.0 실행 완료"

      - name: 📊 Execution Summary v5.0
        if: always() && steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "📊 Epic Seven Monitor v5.0 Summary:"
          echo "⏰ Completed at: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🎯 Mode: 30분 통합 스케줄 (즉시 처리)"
          echo "🖥️ System Resources:"
          echo "   Memory: $(free -h | grep Mem | awk '{print $3/$2}')"
          echo "   Disk: $(df -h . | tail -1 | awk '{print $3/$2 " (" $5 ")"}')"
          echo "   CPU Load: $(uptime | awk -F'load average:' '{ print $2 }')"

      - name: 🔄 Commit Changes v5.0
        if: success() && steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "🔄 Committing changes from v5.0 execution..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Epic Seven v5.0"
          
          # 변경사항 확인 및 커밋
          if [[ -n $(git status --porcelain) ]]; then
            echo "📝 Changes detected, committing..."
            git add *.json *.html *.log 2>/dev/null || true
            
            commit_msg="🎮 Epic7 Monitor v5.0: $(date '+%Y-%m-%d %H:%M:%S') [30분 통합]"
            git commit -m "$commit_msg" || true
            git push || echo "⚠️ Push failed - continuing..."
            echo "✅ Changes committed successfully"
          else
            echo "✅ No changes to commit"
          fi

      - name: 🔓 Release Execution Lock
        if: always() && steps.status_check.outputs.can_execute == 'true'
        run: |
          echo "🔓 실행 락 해제..."
          rm -f $EXECUTION_LOCK_FILE
          echo "✅ 실행 락 파일 제거 완료"

      - name: ⏸️ Execution Skipped
        if: steps.status_check.outputs.can_execute == 'false'
        run: |
          echo "⏸️ Epic Seven Monitor v5.0 실행 건너뜀"
          echo "📝 사유: 이전 실행이 아직 진행 중"
          echo "⏰ 다음 스케줄: $(date -d '+30 minutes' '+%Y-%m-%d %H:%M:%S %Z')"

  # 🚨 실패 시 알림 (v5.0 개선)
  failure-notification-v5:
    name: 🚨 Failure Notification v5.0
    runs-on: ubuntu-latest
    needs: [unified-monitor-v5]
    if: failure()

    steps:
      - name: 🔓 Emergency Lock Release
        run: |
          echo "🚨 비상 락 파일 정리..."
          rm -f $EXECUTION_LOCK_FILE || true
          echo "✅ 비상 락 해제 완료"

      - name: 🚨 Send Enhanced Failure Notification
        env:
          DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        run: |
          if [[ -n "$DISCORD_WEBHOOK_BUG" ]]; then
            echo "🚨 Sending enhanced failure notification to Discord..."
            
            # 실패 원인 분석
            failure_reason="알 수 없는 오류"
            if [[ "${{ needs.unified-monitor-v5.result }}" == "cancelled" ]]; then
              failure_reason="실행 취소됨"
            elif [[ "${{ needs.unified-monitor-v5.result }}" == "failure" ]]; then
              failure_reason="실행 중 오류 발생"
            fi
            
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{
                   \"embeds\": [{
                     \"title\": \"🚨 Epic7 Monitor v5.0 실행 실패\",
                     \"description\": \"Epic7 모니터링 시스템 v5.0 실행 중 오류가 발생했습니다.\",
                     \"color\": 15548997,
                     \"fields\": [
                       {
                         \"name\": \"⏰ 실행 시간\",
                         \"value\": \"$(date '+%Y-%m-%d %H:%M:%S %Z')\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🚨 실패 원인\",
                         \"value\": \"$failure_reason\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🎯 버전\",
                         \"value\": \"v5.0 (30분 통합)\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🔧 Debug 모드\",
                         \"value\": \"${{ github.event.inputs.debug_mode || 'false' }}\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🔄 Force Crawl\",
                         \"value\": \"${{ github.event.inputs.force_crawl || 'false' }}\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"⏰ 다음 실행\",
                         \"value\": \"$(date -d '+30 minutes' '+%H:%M')\",
                         \"inline\": true
                       },
                       {
                         \"name\": \"🔗 실행 로그\",
                         \"value\": \"[View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                         \"inline\": false
                       }
                     ],
                     \"footer\": {
                       \"text\": \"Epic7 Monitor v5.0 | 30분 통합 스케줄\"
                     },
                     \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
                   }]
                 }" \
                 "$DISCORD_WEBHOOK_BUG"
            
            echo "✅ Enhanced failure notification sent"
          else
            echo "⚠️ Discord webhook not configured for failure notifications"
          fi

  # 📊 실행 통계 수집 (v5.0 신규)
  execution-stats-v5:
    name: 📊 Execution Statistics v5.0
    runs-on: ubuntu-latest
    needs: [unified-monitor-v5]
    if: always()

    steps:
      - name: 📊 Collect Execution Statistics
        run: |
          echo "📊 Epic Seven Monitor v5.0 실행 통계:"
          echo "⏰ 실행 일시: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🎯 스케줄: 30분 통합 (매시 30분)"
          echo "📈 실행 결과: ${{ needs.unified-monitor-v5.result }}"
          echo "⏱️ 타임아웃: ${{ github.event.inputs.execution_timeout || '45' }}분"
          echo "🔧 Debug: ${{ github.event.inputs.debug_mode || 'false' }}"
          echo "🔄 Force Crawl: ${{ github.event.inputs.force_crawl || 'false' }}"
          echo "🚀 버전: v5.0 (게시글별 즉시 처리)"
          echo "⏭️ 다음 실행: $(date -d '+30 minutes' '+%Y-%m-%d %H:%M:%S %Z')"