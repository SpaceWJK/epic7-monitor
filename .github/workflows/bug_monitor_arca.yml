name: Bug Monitor ARCA + RULIWEB + STOVE (Optimized)

on:
  schedule:
    - cron: '*/15 * * * *'  # 15분마다 실행
  workflow_dispatch:        # 수동 실행 가능
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Test mode (single run)'
        required: false
        default: 'false'
        type: boolean

jobs:
  monitor-korean-sites:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 🌐 Install Chrome (SeleniumBase Optimized)
      run: |
        echo "=== Chrome 설치 시작 (SeleniumBase 최적화) ==="
        
        # Chrome 설치 (SeleniumBase가 ChromeDriver 자동 관리)
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Chrome 버전 확인
        CHROME_VERSION=$(google-chrome --version)
        echo "Chrome 설치 완료: $CHROME_VERSION"
        
        # 시스템 최적화
        sudo apt-get install -y xvfb
        echo "가상 디스플레이 설정 완료"
        
        # 메모리 최적화
        sudo sysctl -w vm.max_map_count=262144
        echo "시스템 메모리 설정 최적화 완료"
    
    - name: 📦 Install Python dependencies (Fixed)
      run: |
        echo "=== Python 의존성 설치 (충돌 해결) ==="
        python -m pip install --upgrade pip
        
        # 호환성 우선 전략으로 설치
        pip install -r requirements.txt --no-cache-dir
        
        # 설치 확인
        echo "=== 주요 패키지 버전 확인 ==="
        pip show selenium seleniumbase beautifulsoup4 requests
        
        # SeleniumBase 설정 확인
        python -c "from seleniumbase import Driver; print('SeleniumBase 정상 설치 확인')"
        
        echo "Python 패키지 설치 완료"
    
    - name: 🔍 Run Korean Sites Monitoring (Enhanced)
      run: |
        echo "=== 국내 사이트 모니터링 시작 (SeleniumBase 최적화) ==="
        echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
        echo "디버그 모드: ${{ github.event.inputs.debug_mode }}"
        echo "테스트 모드: ${{ github.event.inputs.test_mode }}"
        
        # 환경 변수 설정
        export PYTHONUNBUFFERED=1
        export SELENIUMBASE_HEADLESS=1
        export DISPLAY=:99
        
        # 가상 디스플레이 시작
        Xvfb :99 -screen 0 1920x1080x24 &
        sleep 2
        
        # 실행 모드 결정
        if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
          echo "🐛 디버그 모드로 실행"
          python monitor_bugs.py --mode arca --debug --verbose
        elif [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "🧪 테스트 모드로 실행"
          python monitor_bugs.py --mode arca --test
        else
          echo "🔍 일반 모드로 실행"
          python monitor_bugs.py --mode arca
        fi
        
        echo "모니터링 완료: $(date '+%Y-%m-%d %H:%M:%S KST')"
      env:
        DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        PYTHONUNBUFFERED: 1
        SELENIUMBASE_HEADLESS: 1
    
    - name: 📊 Upload Debug Files
      if: always() && (github.event.inputs.debug_mode == 'true' || failure())
      uses: actions/upload-artifact@v4
      with:
        name: debug-files-${{ github.run_number }}
        path: |
          *_debug_*.html
          *_error_*.html
          *.log
          crawled_links.json
        retention-days: 7
        if-no-files-found: ignore
    
    - name: 🔧 System Diagnostics (On Failure)
      if: failure()
      run: |
        echo "=== 시스템 진단 정보 ==="
        echo "Chrome 버전: $(google-chrome --version 2>/dev/null || echo 'Chrome 없음')"
        echo "Python 버전: $(python --version)"
        echo "메모리 사용량:"
        free -h
        echo "디스크 사용량:"
        df -h
        echo "실행 중인 프로세스:"
        ps aux | grep -E "(chrome|python)" | head -10
        
        echo "=== 로그 파일 확인 ==="
        find . -name "*.log" -o -name "*debug*.html" | head -5 | xargs ls -la
        
        echo "=== Python 패키지 상태 ==="
        pip list | grep -E "(selenium|beautifulsoup|requests)"
    
    - name: 💾 Commit and push changes
      if: success()
      run: |
        echo "=== Git 변경사항 처리 ==="
        
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action Bot"
        
        # 변경된 파일 확인
        git add crawled_links.json
        
        if git diff --staged --quiet; then
          echo "변경 사항 없음"
        else
          echo "변경 사항 발견, 커밋 진행"
          git status --porcelain
          
          # 커밋 메시지 생성
          COMMIT_MSG="🔄 [ARCA] 크롤링 상태 업데이트 - $(date '+%Y-%m-%d %H:%M KST')"
          
          # 실행 모드별 메시지 추가
          if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
            COMMIT_MSG="$COMMIT_MSG (DEBUG)"
          elif [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            COMMIT_MSG="$COMMIT_MSG (TEST)"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push
          echo "Git 푸시 완료"
        fi
    
    - name: 📈 Execution Summary
      if: always()
      run: |
        echo "=== 실행 결과 요약 ==="
        echo "작업 상태: ${{ job.status }}"
        echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
        echo "워크플로우 번호: ${{ github.run_number }}"
        echo "실행 ID: ${{ github.run_id }}"
        
        # 링크 상태 확인
        if [ -f "crawled_links.json" ]; then
          LINK_COUNT=$(cat crawled_links.json | jq '.links | length' 2>/dev/null || echo "0")
          echo "저장된 링크 수: $LINK_COUNT"
          
          # 최근 업데이트 시간
          LAST_UPDATE=$(cat crawled_links.json | jq -r '.last_updated' 2>/dev/null || echo "알 수 없음")
          echo "마지막 업데이트: $LAST_UPDATE"
        else
          echo "crawled_links.json 파일 없음"
        fi
        
        # 디버그 파일 상태
        DEBUG_FILES=$(find . -name "*debug*.html" -o -name "*error*.html" | wc -l)
        echo "생성된 디버그 파일 수: $DEBUG_FILES"
        
        # 메모리 사용량 최종 확인
        echo "최종 메모리 사용량:"
        free -h
        
        # 성공/실패 알림
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ 워크플로우 성공적으로 완료"
        else
          echo "❌ 워크플로우 실행 중 오류 발생"
        fi