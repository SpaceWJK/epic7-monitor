name: Bug Monitor Korean Sites (Chrome Stability Enhanced)

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Enable test mode'
        required: false
        default: 'false'
        type: boolean

jobs:
  monitor-korean-sites:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 🌐 Install Chrome (Stable Version)
      run: |
        echo "=== Chrome 안정 버전 설치 시작 ==="
        
        # 기존 Chrome 제거
        sudo apt-get remove -y google-chrome-stable || true
        
        # Chrome 키 및 저장소 추가
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        
        # 패키지 목록 업데이트
        sudo apt-get update
        
        # 특정 안정 버전 설치 (Chrome 131)
        sudo apt-get install -y google-chrome-stable=131.0.6778.108-1 || {
          echo "특정 버전 설치 실패, 최신 안정 버전 설치 시도"
          sudo apt-get install -y google-chrome-stable
        }
        
        # Chrome 버전 확인
        CHROME_VERSION=$(google-chrome --version)
        echo "✅ 설치된 Chrome 버전: $CHROME_VERSION"
        
        # Chrome 버전 홀드 (자동 업데이트 방지)
        sudo apt-mark hold google-chrome-stable
        
        echo "=== Chrome 설치 완료 ==="

    - name: 📦 Install Python dependencies
      run: |
        echo "=== Python 의존성 설치 시작 ==="
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # ChromeDriver 관련 패키지 최신화
        pip install --upgrade selenium webdriver-manager
        
        echo "✅ Python 패키지 설치 완료"

    - name: 🔧 Setup ChromeDriver (Enhanced)
      run: |
        echo "=== ChromeDriver 설정 시작 ==="
        
        # Chrome 버전 추출
        CHROME_VERSION=$(google-chrome --version | sed 's/Google Chrome //' | sed 's/ .*//')
        echo "Chrome 버전: $CHROME_VERSION"
        
        # ChromeDriver 다운로드 및 설치 (다중 폴백)
        python3 -c "
        import sys
        import os
        import requests
        import zipfile
        import subprocess
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from webdriver_manager.chrome import ChromeDriverManager
        
        def test_chromedriver(driver_path):
            '''ChromeDriver 테스트'''
            try:
                options = Options()
                options.add_argument('--headless')
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                
                from selenium.webdriver.chrome.service import Service
                service = Service(driver_path)
                driver = webdriver.Chrome(service=service, options=options)
                driver.get('https://www.google.com')
                driver.quit()
                return True
            except Exception as e:
                print(f'ChromeDriver 테스트 실패: {e}')
                return False
        
        def method1_webdriver_manager():
            '''방법 1: WebDriver Manager 사용'''
            try:
                print('방법 1: WebDriver Manager 시도...')
                driver_path = ChromeDriverManager().install()
                print(f'WebDriver Manager 설치 경로: {driver_path}')
                
                if test_chromedriver(driver_path):
                    print('✅ WebDriver Manager 성공')
                    return True
                else:
                    print('❌ WebDriver Manager 실패')
                    return False
            except Exception as e:
                print(f'WebDriver Manager 에러: {e}')
                return False
        
        def method2_system_chromedriver():
            '''방법 2: 시스템 ChromeDriver 사용'''
            try:
                print('방법 2: 시스템 ChromeDriver 시도...')
                system_paths = [
                    '/usr/local/bin/chromedriver',
                    '/usr/bin/chromedriver',
                    '/snap/bin/chromium.chromedriver'
                ]
                
                for path in system_paths:
                    if os.path.exists(path):
                        if test_chromedriver(path):
                            print(f'✅ 시스템 ChromeDriver 성공: {path}')
                            return True
                
                print('❌ 시스템 ChromeDriver 실패')
                return False
            except Exception as e:
                print(f'시스템 ChromeDriver 에러: {e}')
                return False
        
        def method3_manual_download():
            '''방법 3: 수동 다운로드'''
            try:
                print('방법 3: 수동 다운로드 시도...')
                
                # Chrome 131 버전용 ChromeDriver 다운로드
                driver_version = '131.0.6778.108'
                download_url = f'https://storage.googleapis.com/chrome-for-testing-public/{driver_version}/linux64/chromedriver-linux64.zip'
                
                response = requests.get(download_url)
                if response.status_code == 200:
                    with open('chromedriver.zip', 'wb') as f:
                        f.write(response.content)
                    
                    with zipfile.ZipFile('chromedriver.zip', 'r') as zip_ref:
                        zip_ref.extractall('.')
                    
                    os.chmod('chromedriver-linux64/chromedriver', 0o755)
                    driver_path = os.path.abspath('chromedriver-linux64/chromedriver')
                    
                    if test_chromedriver(driver_path):
                        print('✅ 수동 다운로드 성공')
                        return True
                
                print('❌ 수동 다운로드 실패')
                return False
            except Exception as e:
                print(f'수동 다운로드 에러: {e}')
                return False
        
        # 순차적으로 시도
        success = False
        methods = [method1_webdriver_manager, method2_system_chromedriver, method3_manual_download]
        
        for method in methods:
            if method():
                success = True
                break
        
        if not success:
            print('❌ 모든 ChromeDriver 설치 방법 실패')
            sys.exit(1)
        else:
            print('✅ ChromeDriver 설치 완료')
        "
        
        echo "=== ChromeDriver 설정 완료 ==="

    - name: 🔍 Determine execution flags
      id: mode
      run: |
        ARGS="--mode korean"
        if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
          ARGS="$ARGS --debug"
        fi
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          ARGS="$ARGS --test"
        fi
        echo "ARGS=$ARGS" >> $GITHUB_ENV
        echo "🎯 실행 인자: $ARGS"

    - name: 🚀 Run Korean Sites Monitoring
      run: |
        echo "=== 한국 사이트 모니터링 시작 ==="
        echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
        echo "ARGS: $ARGS"
        
        # 환경 변수 확인
        echo "=== 환경 변수 확인 ==="
        echo "PYTHONPATH: $PYTHONPATH"
        echo "PATH: $PATH"
        
        # Python 모듈 확인
        python -c "
        import sys
        print('Python 버전:', sys.version)
        
        try:
            import selenium
            print('Selenium 버전:', selenium.__version__)
        except ImportError as e:
            print('Selenium 임포트 에러:', e)
        
        try:
            import webdriver_manager
            print('WebDriver Manager 버전:', webdriver_manager.__version__)
        except ImportError as e:
            print('WebDriver Manager 임포트 에러:', e)
        
        try:
            from deep_translator import GoogleTranslator
            print('Deep Translator 사용 가능')
        except ImportError as e:
            print('Deep Translator 임포트 에러:', e)
        "
        
        # 메인 스크립트 실행
        python monitor_bugs.py $ARGS
        
        echo "모니터링 완료: $(date '+%Y-%m-%d %H:%M:%S KST')"
      env:
        DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
        DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
        DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
        PYTHONUNBUFFERED: 1

    - name: 📊 Upload Debug Files (if debug mode)
      if: github.event.inputs.debug_mode == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: debug-html-files-korean-${{ github.run_number }}
        path: |
          *_debug_selenium.html
          *_error_debug.html
          *.log
        retention-days: 7

    - name: 💾 Smart Git Commit
      run: |
        echo "=== Git 변경사항 처리 ==="
        git config --global user.email "epic7-korean@github.com"
        git config --global user.name "Epic7 Korean Monitor"

        git add -A
        if git diff --staged --quiet; then
          echo "변경 사항 없음"
          exit 0
        fi

        COMMIT_MSG="🔄 [KOREAN] 크롤링 상태 업데이트 - $(date '+%Y-%m-%d %H:%M KST')"
        if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
          COMMIT_MSG="$COMMIT_MSG (DEBUG)"
        fi
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          COMMIT_MSG="$COMMIT_MSG (TEST)"
        fi

        git commit -m "$COMMIT_MSG"

        for i in {1..5}; do
          echo "푸시 시도 $i/5"
          if git push origin main; then
            echo "Git 푸시 완료"
            break
          else
            echo "Git 푸시 실패, 재시도 ($i/5)"
            git fetch origin main
            git rebase origin/main || {
              echo "리베이스 실패, 강제 초기화"
              git reset --hard origin/main
            }
            sleep $((i * 2))
          fi
        done

    - name: 📈 System Status Report
      if: always()
      run: |
        echo "=== 시스템 상태 보고 ==="
        echo "작업 상태: ${{ job.status }}"
        echo "워크플로우 번호: ${{ github.run_number }}"
        echo "실행 ID: ${{ github.run_id }}"
        echo "크롤링 대상: 스토브, 루리웹, 아카라이브"

        # Chrome 및 ChromeDriver 상태 확인
        echo "=== Chrome 상태 ==="
        google-chrome --version || echo "Chrome 버전 확인 실패"
        
        echo "=== ChromeDriver 상태 ==="
        chromedriver --version 2>/dev/null || echo "ChromeDriver 버전 확인 실패"
        
        if [ -f "crawled_links_korean.json" ]; then
          LINK_COUNT=$(jq '.links | length' crawled_links_korean.json 2>/dev/null || echo 0)
          LAST_UPDATE=$(jq -r '.last_updated' crawled_links_korean.json 2>/dev/null || echo "N/A")
          echo "저장된 링크 수: $LINK_COUNT"
          echo "마지막 업데이트: $LAST_UPDATE"
        fi

        DEBUG_FILES=$(ls -la *_debug_selenium.html *_error_debug.html *.log 2>/dev/null | wc -l)
        echo "생성된 디버그 파일 수: $DEBUG_FILES"

        echo "최종 메모리 사용량:"
        free -h

        echo "✅ 한국 사이트 워크플로우 완료"