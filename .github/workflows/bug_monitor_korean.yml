name: 🌐 Bug Monitor Korean Sites (Fixed)

on:
  workflow_call:
    inputs:
      debug_mode:
        required: false
        type: boolean
        default: false
      test_mode:
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '*/30 * * * *'  # 30분마다 실행
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Enable test mode'
        required: false
        default: false
        type: boolean

jobs:
  monitor-korean-sites:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # 타임아웃 시간 연장
    
    env:
      TZ: Asia/Seoul
      DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
      DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
      DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install webdriver-manager  # Chrome Driver 관리

    - name: 🌐 Install Chrome and ChromeDriver (Robust)
      run: |
        # Google Chrome 최신 설치
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Chrome 버전 확인
        CHROME_VERSION=$(google-chrome --version)
        echo "설치된 Chrome 버전: $CHROME_VERSION"
        
        # Chrome for Testing API를 통한 ChromeDriver 다운로드
        python -c "
        import requests
        import zipfile
        import os
        import stat
        import subprocess
        
        try:
            # Chrome for Testing API 사용
            api_url = 'https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json'
            response = requests.get(api_url, timeout=30)
            data = response.json()
            
            # Chrome 버전 확인
            chrome_version = subprocess.check_output(['google-chrome', '--version']).decode().strip()
            major_version = chrome_version.split()[2].split('.')[0]
            
            # 해당 버전의 ChromeDriver 찾기
            target_version = None
            for version in data['builds'].keys():
                if version.startswith(major_version + '.'):
                    target_version = version
                    break
            
            if not target_version:
                target_version = max(data['builds'].keys(), key=lambda x: [int(i) for i in x.split('.')])
            
            # ChromeDriver 다운로드 URL 찾기
            for download in data['builds'][target_version]['downloads']['chromedriver']:
                if download['platform'] == 'linux64':
                    chromedriver_url = download['url']
                    break
            
            print(f'ChromeDriver 다운로드 URL: {chromedriver_url}')
            
            # 다운로드 및 설치
            driver_response = requests.get(chromedriver_url, timeout=120)
            with open('/tmp/chromedriver.zip', 'wb') as f:
                f.write(driver_response.content)
            
            with zipfile.ZipFile('/tmp/chromedriver.zip', 'r') as zip_ref:
                zip_ref.extractall('/tmp/chromedriver')
            
            # 실행 권한 부여
            chromedriver_path = '/tmp/chromedriver/chromedriver-linux64/chromedriver'
            os.chmod(chromedriver_path, 0o755)
            
            # /usr/local/bin에 복사
            import shutil
            shutil.copy(chromedriver_path, '/usr/local/bin/chromedriver')
            
            print('ChromeDriver 설치 완료')
            
        except Exception as e:
            print(f'Chrome for Testing API 실패: {e}')
            # Fallback: webdriver-manager 사용
            from webdriver_manager.chrome import ChromeDriverManager
            ChromeDriverManager().install()
        "
        
        # ChromeDriver 설치 확인
        chromedriver --version

    - name: 🔍 Run Korean Sites Monitoring
      run: |
        echo "=== 한국 사이트 모니터링 시작 ==="
        echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "ARGS: --mode korean ${{ inputs.debug_mode == true && '--debug' || '' }} ${{ inputs.test_mode == true && '--test' || '' }}"
        
        python monitor_bugs.py --mode korean \
          ${{ inputs.debug_mode == true && '--debug' || '' }} \
          ${{ inputs.test_mode == true && '--test' || '' }}

    - name: 📤 Upload debug files (if failed)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: korean-debug-files
        path: |
          *.html
          *.log
          *.json
        retention-days: 3

    - name: 💬 Notify on failure
      if: failure()
      run: |
        if [ -n "${{ secrets.DISCORD_WEBHOOK_BUG }}" ]; then
          python -c "
          import requests
          import json
          from datetime import datetime
          
          webhook_url = '${{ secrets.DISCORD_WEBHOOK_BUG }}'
          message = {
              'embeds': [{
                  'title': '🚨 한국 사이트 모니터링 실패',
                  'description': '한국 사이트 크롤링 중 오류가 발생했습니다.',
                  'color': 0xff0000,
                  'fields': [
                      {'name': '워크플로우', 'value': 'Korean Sites Monitor', 'inline': True},
                      {'name': '실행 시간', 'value': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'inline': True},
                      {'name': '상태', 'value': '실패', 'inline': True}
                  ],
                  'timestamp': datetime.now().isoformat()
              }]
          }
          
          response = requests.post(webhook_url, json=message, timeout=10)
          print(f'Discord 알림 전송 상태: {response.status_code}')
          "
        fi