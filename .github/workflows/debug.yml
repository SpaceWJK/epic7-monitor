name: 🐛 Epic7 Debug & Testing (Optimized v3.1)

on:
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Debug level (basic/full/system)'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - system
      test_mode:
        description: 'Test specific component'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - crawler
        - classifier
        - notifier
        - korean_sites
        - global_sites
        - translation
      force_crawl:
        description: 'Force crawl (ignore duplicates)'
        required: false
        default: 'false'
        type: boolean
      reuse_environment:
        description: 'Reuse existing Chrome/Python environment'
        required: false
        default: 'true'
        type: boolean

env:
  TZ: Asia/Seoul
  PYTHONUNBUFFERED: 1
  DEBUG_LEVEL: ${{ github.event.inputs.debug_level || 'basic' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'all' }}
  FORCE_CRAWL: ${{ github.event.inputs.force_crawl || 'false' }}
  REUSE_ENVIRONMENT: ${{ github.event.inputs.reuse_environment || 'true' }}

jobs:
  debug-test-optimized:
    name: 🔍 Debug & Test (Optimized)
    runs-on: ubuntu-latest
    timeout-minutes: 45  # 60분 → 45분으로 단축
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔄 Sync with Remote
        run: |
          echo "🔄 Syncing with remote repository..."
          git fetch origin main
          git rebase origin/main || git merge origin/main
          echo "✅ Repository synchronized"

      - name: 🐍 Setup Python Environment (Optimized)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🌐 Smart Chrome Installation
        id: chrome_setup
        run: |
          echo "🌐 Smart Chrome installation process..."
          
          # 기존 Chrome 설치 확인
          if command -v google-chrome &> /dev/null && [ "$REUSE_ENVIRONMENT" = "true" ]; then
            echo "✅ Chrome already installed: $(google-chrome --version)"
            CHROME_INSTALLED=true
          else
            echo "📦 Installing Chrome and ChromeDriver..."
            
            # Chrome 설치
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
            
            # ChromeDriver 설치 (최적화된 단일 방법)
            CHROME_VERSION=$(google-chrome --version | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
            CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d'.' -f1)
            
            echo "Chrome version: $CHROME_VERSION (Major: $CHROME_MAJOR_VERSION)"
            
            # Chrome for Testing API 사용 (가장 안정적)
            wget -q "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
            unzip -q chromedriver-linux64.zip
            sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            
            # 설치 확인
            chromedriver --version
            CHROME_INSTALLED=true
          fi
          
          echo "CHROME_INSTALLED=$CHROME_INSTALLED" >> $GITHUB_OUTPUT

      - name: 📦 Optimized Dependencies Installation
        run: |
          echo "📦 Installing optimized dependencies..."
          
          # 기본 패키지 업그레이드
          python -m pip install --upgrade pip --quiet
          
          # 조건부 requirements.txt 설치
          if [ -f "requirements.txt" ]; then
            echo "📋 Installing from requirements.txt..."
            pip install -r requirements.txt --quiet
          else
            echo "📋 Installing essential packages..."
            pip install --quiet \
              requests \
              beautifulsoup4 \
              selenium \
              lxml \
              deep-translator \
              python-dateutil \
              psutil
          fi
          
          echo "✅ Dependencies installed successfully"

      - name: 🧪 Python Module Import Test
        run: |
          echo "🧪 Testing Python module imports..."
          
          # 표준 라이브러리 테스트
          python -c "import sys, os, json, re, time, random, logging, datetime; print('✅ Standard libraries OK')"
          
          # 외부 라이브러리 테스트
          python -c "import requests, bs4, selenium, lxml; print('✅ External libraries OK')"
          
          # 프로젝트 모듈 테스트 (존재하는 경우)
          test_modules=("config" "utils" "file_manager" "crawler" "classifier" "notifier")
          
          for module in "${test_modules[@]}"; do
            if [ -f "${module}.py" ]; then
              if python -c "import $module" 2>/dev/null; then
                echo "✅ $module.py import successful"
              else
                echo "❌ $module.py import failed"
              fi
            else
              echo "⚠️ $module.py not found"
            fi
          done

      - name: 🌐 Network Connectivity Test
        run: |
          echo "🌐 Testing network connectivity..."
          
          sites=(
            "https://google.com"
            "https://page.onstove.com"
            "https://cafe.naver.com"
            "https://www.reddit.com"
            "https://discord.com"
          )
          
          for site in "${sites[@]}"; do
            if curl -s --head "$site" | head -n 1 | grep -q "200 OK"; then
              echo "✅ $site - OK"
            else
              echo "❌ $site - Failed"
            fi
          done

      - name: 🚗 Selenium Driver Test
        if: steps.chrome_setup.outputs.CHROME_INSTALLED == 'true'
        run: |
          echo "🚗 Testing Selenium Chrome driver..."
          
          python -c "
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          
          options = Options()
          options.add_argument('--headless')
          options.add_argument('--no-sandbox')
          options.add_argument('--disable-dev-shm-usage')
          
          try:
              driver = webdriver.Chrome(options=options)
              driver.get('https://google.com')
              title = driver.title
              driver.quit()
              print(f'✅ Selenium test successful: {title}')
          except Exception as e:
              print(f'❌ Selenium test failed: {e}')
          "

      - name: 🇰🇷 Korean Sites Test
        if: contains(env.TEST_MODE, 'korean_sites') || env.TEST_MODE == 'all'
        run: |
          echo "🇰🇷 Testing Korean sites access..."
          
          # 한국 사이트 접근 테스트
          korean_sites=(
            "https://page.onstove.com/epicseven/kr"
            "https://cafe.naver.com/epic7"
          )
          
          for site in "${korean_sites[@]}"; do
            if curl -s --head "$site" | head -n 1 | grep -q "200\|301\|302"; then
              echo "✅ $site - Accessible"
            else
              echo "❌ $site - Not accessible"
            fi
          done

      - name: 🌍 Global Sites Test
        if: contains(env.TEST_MODE, 'global_sites') || env.TEST_MODE == 'all'
        run: |
          echo "🌍 Testing global sites access..."
          
          # 글로벌 사이트 접근 테스트
          global_sites=(
            "https://page.onstove.com/epicseven/global"
            "https://www.reddit.com/r/EpicSeven/"
          )
          
          for site in "${global_sites[@]}"; do
            if curl -s --head "$site" | head -n 1 | grep -q "200\|301\|302"; then
              echo "✅ $site - Accessible"
            else
              echo "❌ $site - Not accessible"
            fi
          done

      - name: 🔤 Translation Test
        if: contains(env.TEST_MODE, 'translation') || env.TEST_MODE == 'all'
        run: |
          echo "🔤 Testing translation functionality..."
          
          python -c "
          from deep_translator import GoogleTranslator
          
          try:
              translator = GoogleTranslator(source='en', target='ko')
              result = translator.translate('Hello Epic Seven')
              print(f'✅ Translation test successful: {result}')
          except Exception as e:
              print(f'❌ Translation test failed: {e}')
          "

      - name: 🧩 Component Tests
        if: env.TEST_MODE != 'all'
        run: |
          echo "🧩 Running component-specific tests..."
          
          case "$TEST_MODE" in
            "crawler")
              echo "🕷️ Testing crawler component..."
              if [ -f "crawler.py" ]; then
                python -c "
                import crawler
                print('✅ Crawler module loaded successfully')
                # 여기에 crawler 특정 테스트 추가
                "
              else
                echo "❌ crawler.py not found"
              fi
              ;;
            "classifier")
              echo "🧠 Testing classifier component..."
              if [ -f "classifier.py" ]; then
                python -c "
                import classifier
                print('✅ Classifier module loaded successfully')
                # 여기에 classifier 특정 테스트 추가
                "
              else
                echo "❌ classifier.py not found"
              fi
              ;;
            "notifier")
              echo "🔔 Testing notifier component..."
              if [ -f "notifier.py" ]; then
                python -c "
                import notifier
                print('✅ Notifier module loaded successfully')
                # 여기에 notifier 특정 테스트 추가
                "
              else
                echo "❌ notifier.py not found"
              fi
              ;;
          esac

      - name: 🔧 System Integration Test
        if: env.TEST_MODE == 'all'
        run: |
          echo "🔧 Running system integration test..."
          
          # monitor_bugs.py 실행 테스트
          if [ -f "monitor_bugs.py" ]; then
            echo "🚀 Testing monitor_bugs.py..."
            
            # 테스트 모드로 실행
            python monitor_bugs.py \
              --mode all \
              --debug true \
              --test true || echo "⚠️ Integration test completed with warnings"
          else
            echo "⚠️ monitor_bugs.py not found - skipping integration test"
          fi

      - name: 📊 System Resource Analysis
        run: |
          echo "📊 Analyzing system resources..."
          
          # 시스템 정보
          echo "🖥️ System Information:"
          uname -a
          
          # 메모리 사용량
          echo "💾 Memory Usage:"
          free -h
          
          # 디스크 사용량
          echo "💿 Disk Usage:"
          df -h
          
          # 프로세스 정보
          echo "⚙️ Process Information:"
          ps aux --sort=-%mem | head -10
          
          # 버전 정보
          echo "📋 Version Information:"
          python --version
          pip --version
          [ -f "/usr/local/bin/chromedriver" ] && chromedriver --version || echo "ChromeDriver not found"
          google-chrome --version 2>/dev/null || echo "Chrome not found"

      - name: 📝 Generate Debug Report
        run: |
          echo "📝 Generating debug report..."
          
          cat > debug_report.md << 'EOF'
          # 🐛 Epic7 Debug Report
          
          **생성 시간:** $(date '+%Y-%m-%d %H:%M:%S %Z')
          **Debug Level:** ${{ env.DEBUG_LEVEL }}
          **Test Mode:** ${{ env.TEST_MODE }}
          **Force Crawl:** ${{ env.FORCE_CRAWL }}
          **Reuse Environment:** ${{ env.REUSE_ENVIRONMENT }}
          
          ## 🖥️ 시스템 정보
          - **OS:** $(uname -s) $(uname -r)
          - **Python:** $(python --version)
          - **Chrome:** $(google-chrome --version 2>/dev/null || echo "Not installed")
          - **ChromeDriver:** $(chromedriver --version 2>/dev/null || echo "Not installed")
          
          ## 📊 리소스 상태
          - **메모리:** $(free -h | grep Mem | awk '{print $3 "/" $2}')
          - **디스크:** $(df -h . | tail -1 | awk '{print $3 "/" $2 " (" $5 ")"}')
          
          ## 📁 파일 현황
          ```
          $(find . -name "*.py" -o -name "*.json" -o -name "*.yml" | head -20)
          ```
          
          ## 🔧 테스트 결과
          - **Python 모듈:** $(python -c "import sys; print('✅ OK')" 2>/dev/null || echo "❌ Error")
          - **네트워크:** $(curl -s --head https://google.com | head -n 1 | grep -q "200" && echo "✅ OK" || echo "❌ Error")
          - **Selenium:** $([ -f "/usr/local/bin/chromedriver" ] && echo "✅ OK" || echo "❌ Error")
          
          ---
          **리포트 생성 완료:** $(date '+%Y-%m-%d %H:%M:%S %Z')
          EOF
          
          # 환경 변수 치환
          envsubst < debug_report.md > debug_report_final.md
          mv debug_report_final.md debug_report.md
          
          echo "✅ Debug report generated successfully"

      - name: 📤 Upload Debug Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts-${{ github.run_id }}
          path: |
            debug_report.md
            *.json
            *.log
            debug*.html
          retention-days: 7

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          
          # 임시 파일 정리
          rm -f /tmp/chromedriver*.zip 2>/dev/null || true
          rm -rf /tmp/chromedriver-linux64 2>/dev/null || true
          
          echo "✅ Cleanup completed"

      - name: 📋 Summary
        if: always()
        run: |
          echo "📋 Debug & Test Summary:"
          echo "- Debug Level: ${{ env.DEBUG_LEVEL }}"
          echo "- Test Mode: ${{ env.TEST_MODE }}"
          echo "- Status: ${{ job.status }}"
          echo "- Duration: ${{ job.duration || 'N/A' }}"
          echo "✅ Debug workflow completed"
