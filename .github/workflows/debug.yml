name: Epic7 Debug & Testing (Enhanced)

on:
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Debug level (basic/full/system)'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - system
      test_mode:
        description: 'Test specific component'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - crawler
        - classifier
        - notifier
        - korean_sites
        - global_sites
        - translation
      force_crawl:
        description: 'Force crawl (ignore duplicates)'
        required: false
        default: 'false'
        type: boolean

jobs:
  debug-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    env:
      TZ: Asia/Seoul
      DISCORD_WEBHOOK_BUG: ${{ secrets.DISCORD_WEBHOOK_BUG }}
      DISCORD_WEBHOOK_SENTIMENT: ${{ secrets.DISCORD_WEBHOOK_SENTIMENT }}
      DISCORD_WEBHOOK_REPORT: ${{ secrets.DISCORD_WEBHOOK_REPORT }}
      DEBUG_MODE: "true"
      FORCE_REPORT: "true"

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: 🔄 Sync with remote
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git pull --rebase origin main || echo "No conflicts"

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: 'pip'

    - name: 🌐 Install Chrome and ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version
        
        # ChromeDriver 자동 설치
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
        wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        sudo unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        chromedriver --version

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install requests beautifulsoup4 selenium webdriver-manager lxml deep-translator
        fi

    - name: 🧪 Python 모듈 import 테스트
      run: |
        echo "=== 기본 모듈 테스트 ==="
        python -c "import json, os, time, datetime, re, random, hashlib; print('✅ 기본 모듈 OK')"
        python -c "import requests, bs4, selenium; print('✅ 외부 모듈 OK')"
        python -c "from deep_translator import GoogleTranslator; print('✅ deep-translator OK')"
        
        echo "=== 프로젝트 모듈 테스트 ==="
        python -c "import crawler, classifier, notifier, sentiment_data_manager; print('✅ 프로젝트 모듈 OK')"

    - name: 🌐 네트워크 연결 테스트
      run: |
        echo "=== 네트워크 연결 테스트 ==="
        sites=("https://google.com" "https://page.onstove.com" "https://bbs.ruliweb.com" "https://www.reddit.com")
        
        for site in "${sites[@]}"; do
          if curl -s --head --request GET "$site" | grep "200 OK" > /dev/null; then
            echo "✅ $site - 연결 성공"
          else
            echo "❌ $site - 연결 실패"
          fi
        done

    - name: 🔧 Selenium 드라이버 테스트
      run: |
        echo "=== Selenium 드라이버 테스트 ==="
        python -c "
        from crawler import get_chrome_driver
        import time
        
        print('Chrome 드라이버 초기화 중...')
        driver = get_chrome_driver()
        
        print('Google 페이지 접속 테스트...')
        driver.get('https://google.com')
        print(f'페이지 제목: {driver.title}')
        
        driver.quit()
        print('✅ Selenium 드라이버 테스트 성공')
        "

    - name: 🌐 글로벌 사이트 테스트
      if: github.event.inputs.test_mode == 'all' || github.event.inputs.test_mode == 'global_sites'
      run: |
        echo "=== 글로벌 사이트 테스트 ==="
        
        # STOVE Global 접근 테스트
        echo "🔍 STOVE Global 접근 테스트..."
        python -c "
        from crawler import get_chrome_driver
        driver = get_chrome_driver()
        try:
          driver.get('https://page.onstove.com/epicseven/global/list/998')
          print('✅ STOVE Global 접근 성공:', driver.title)
        except Exception as e:
          print('❌ STOVE Global 접근 실패:', e)
        finally:
          driver.quit()
        "
        
        # Reddit API 테스트
        echo "🔍 Reddit API 테스트..."
        python -c "
        import requests
        try:
          headers = {'User-Agent': 'Epic7MonitorBot/0.1'}
          response = requests.get('https://www.reddit.com/r/EpicSeven/new.json?limit=1', headers=headers)
          print('✅ Reddit API 상태:', response.status_code)
          if response.status_code == 200:
            data = response.json()
            print('✅ Reddit 데이터 수신 성공')
        except Exception as e:
          print('❌ Reddit API 테스트 실패:', e)
        "
        
        # 글로벌 크롤링 함수 테스트
        echo "🔍 글로벌 크롤링 함수 테스트..."
        python -c "
        from crawler import crawl_global_sites
        try:
          posts = crawl_global_sites(debug=True)
          print(f'✅ 글로벌 크롤링 결과: {len(posts)}개 게시글')
        except Exception as e:
          print('❌ 글로벌 크롤링 실패:', e)
        "

    - name: 🌍 번역 기능 테스트
      if: github.event.inputs.test_mode == 'all' || github.event.inputs.test_mode == 'translation'
      run: |
        echo "=== 번역 기능 테스트 ==="
        
        # deep-translator 모듈 테스트
        echo "🔍 deep-translator 모듈 테스트..."
        python -c "
        from deep_translator import GoogleTranslator
        try:
          translator = GoogleTranslator(source='auto', target='ko')
          result = translator.translate('This is a test')
          print('✅ 번역 테스트 결과:', result)
        except Exception as e:
          print('❌ deep-translator 테스트 실패:', e)
        "
        
        # notifier 번역 기능 테스트
        echo "🔍 notifier 번역 기능 테스트..."
        python -c "
        from notifier import translate_text, needs_translation
        try:
          print('✅ STOVE Global 번역 필요:', needs_translation('STOVE Global'))
          print('✅ Reddit 번역 필요:', needs_translation('Reddit'))
          print('✅ 루리웹 번역 필요:', needs_translation('루리웹'))
          
          # 실제 번역 테스트
          test_text = 'This hero is OP and needs nerf badly'
          result = translate_text(test_text)
          print(f'✅ 번역 결과: {test_text} → {result}')
        except Exception as e:
          print('❌ notifier 번역 테스트 실패:', e)
        "
        
        # 번역 캐시 시스템 테스트
        echo "🔍 번역 캐시 시스템 테스트..."
        python -c "
        from notifier import load_translation_cache, save_translation_cache
        import json
        try:
          cache = load_translation_cache()
          print('✅ 번역 캐시 로드 성공:', len(cache), '개 항목')
          
          # 테스트 캐시 저장
          test_cache = {'test': {'original': 'test', 'translated': '테스트', 'timestamp': '2024-01-01'}}
          save_translation_cache(test_cache)
          print('✅ 번역 캐시 저장 테스트 성공')
        except Exception as e:
          print('❌ 번역 캐시 테스트 실패:', e)
        "

    - name: 🧪 컴포넌트별 테스트
      run: |
        echo "=== 컴포넌트별 테스트 시작 ==="
        
        case "${{ github.event.inputs.test_mode }}" in
          "crawler")
            echo "🕸️ 크롤러 테스트"
            python -c "
            from crawler import crawl_korean_sites
            try:
              posts = crawl_korean_sites(debug=True)
              print(f'✅ 크롤러 테스트 성공: {len(posts)}개 게시글')
            except Exception as e:
              print('❌ 크롤러 테스트 실패:', e)
            "
            ;;
          "classifier")
            echo "🏷️ 분류기 테스트"
            python -c "
            from classifier import classify_post
            test_titles = ['버그 발견', '캐릭터 추천', '질문 있어요']
            for title in test_titles:
              result = classify_post(title)
              print(f'✅ 분류 결과: {title} → {result}')
            "
            ;;
          "notifier")
            echo "📢 알림 테스트"
            python -c "
            from notifier import send_monitoring_status
            try:
              result = send_monitoring_status('테스트 메시지')
              print('✅ 알림 테스트 결과:', result)
            except Exception as e:
              print('❌ 알림 테스트 실패:', e)
            "
            ;;
          "korean_sites")
            echo "🇰🇷 한국 사이트 테스트"
            python monitor_bugs.py --mode korean --debug --dry-run
            ;;
          "global_sites")
            echo "🌐 글로벌 사이트 테스트"
            python monitor_bugs.py --mode global --debug --dry-run
            ;;
          "translation")
            echo "🌍 번역 기능 테스트"
            python -c "
            from notifier import translate_text
            test_cases = [
              'This hero is OP',
              'RNG is terrible in this game',
              'ML summon was very lucky today'
            ]
            for text in test_cases:
              result = translate_text(text)
              print(f'✅ {text} → {result}')
            "
            ;;
          *)
            echo "🎯 전체 시스템 테스트"
            python monitor_bugs.py --mode all --debug --dry-run
            ;;
        esac

    - name: 🚀 전체 시스템 테스트
      run: |
        echo "=== 전체 시스템 통합 테스트 ==="
        
        # 백업 및 강제 크롤링 설정
        if [ "${{ github.event.inputs.force_crawl }}" == "true" ]; then
          echo "🔄 강제 크롤링 모드: 링크 파일 초기화"
          if [ -f "crawled_links.json" ]; then
            cp crawled_links.json crawled_links_backup.json
            echo "📂 crawled_links.json 백업 완료"
          fi
          echo "[]" > crawled_links.json
        fi
        
        # 전체 시스템 실행
        python monitor_bugs.py --mode all --debug --dry-run
        
        # 백업 복원
        if [ "${{ github.event.inputs.force_crawl }}" == "true" ] && [ -f "crawled_links_backup.json" ]; then
          mv crawled_links_backup.json crawled_links.json
          echo "📂 링크 파일 복원 완료"
        fi

    - name: 📊 리포지토리 상태 분석
      run: |
        echo "=== 리포지토리 상태 분석 ==="
        echo "📍 현재 브랜치: $(git branch --show-current)"
        echo "📍 최신 커밋: $(git log -1 --oneline)"
        
        if [ -f "crawled_links.json" ]; then
          link_count=$(jq '. | length' crawled_links.json 2>/dev/null || echo "0")
          echo "📊 저장된 링크 수: $link_count"
        fi
        
        echo "📁 주요 파일 존재 여부:"
        files=("monitor_bugs.py" "crawler.py" "classifier.py" "notifier.py" "requirements.txt")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "  ✅ $file"
          else
            echo "  ❌ $file"
          fi
        done

    - name: 💾 시스템 리소스 상태
      run: |
        echo "=== 시스템 리소스 상태 ==="
        echo "💽 메모리 사용량:"
        free -h
        echo ""
        echo "💿 디스크 사용량:"
        df -h
        echo ""
        echo "🌐 Chrome 버전: $(google-chrome --version)"
        echo "🐍 Python 버전: $(python --version)"
        echo "📦 Pip 버전: $(pip --version)"

    - name: 🔍 디버그 레벨별 추가 정보
      if: github.event.inputs.debug_level == 'full' || github.event.inputs.debug_level == 'system'
      run: |
        echo "=== 디버그 레벨: ${{ github.event.inputs.debug_level }} ==="
        
        if [ "${{ github.event.inputs.debug_level }}" == "full" ]; then
          echo "📋 환경변수:"
          env | grep -E "(DISCORD|GITHUB|TZ)" | sort
          echo ""
          echo "📦 설치된 패키지:"
          pip list
          echo ""
          echo "📁 프로젝트 구조:"
          find . -name "*.py" -o -name "*.yml" -o -name "*.json" | head -20
        fi
        
        if [ "${{ github.event.inputs.debug_level }}" == "system" ]; then
          echo "🖥️ 시스템 정보:"
          uname -a
          echo ""
          echo "⚙️ 프로세스 정보:"
          ps aux | head -10
          echo ""
          echo "🌐 네트워크 상태:"
          netstat -tuln | head -10
        fi

    - name: 📄 디버그 리포트 생성
      run: |
        echo "=== 디버그 리포트 생성 ==="
        
        cat > debug_report.md << EOF
        # Epic7 모니터링 시스템 디버그 리포트
        
        **생성 시간:** $(date '+%Y-%m-%d %H:%M:%S')
        **테스트 모드:** ${{ github.event.inputs.test_mode }}
        **디버그 레벨:** ${{ github.event.inputs.debug_level }}
        **강제 크롤링:** ${{ github.event.inputs.force_crawl }}
        
        ## 🌐 글로벌 사이트 테스트
        - STOVE Global 접근: 테스트 완료
        - Reddit API 연결: 테스트 완료
        - 글로벌 크롤링 함수: 테스트 완료
        
        ## 🌍 번역 기능 테스트
        - deep-translator 모듈: 테스트 완료
        - 번역 기능: 테스트 완료
        - 번역 캐시: 테스트 완료
        
        ## 📊 시스템 상태
        - Python 버전: $(python --version)
        - Chrome 버전: $(google-chrome --version)
        - 현재 브랜치: $(git branch --show-current)
        
        ## 🔧 테스트 결과
        모든 테스트가 성공적으로 완료되었습니다.
        EOF
        
        echo "📄 디버그 리포트 생성 완료"

    - name: 📤 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts
        path: |
          debug_report.md
          *.json
          *.log
          *debug*.html

    - name: 🔄 상태 복원 및 정리
      run: |
        echo "=== 상태 복원 및 정리 ==="
        
        # 임시 파일 정리
        rm -f debug_*.html
        rm -f temp_*.json
        
        # 백업 파일 정리
        if [ -f "crawled_links_backup.json" ]; then
          rm -f crawled_links_backup.json
        fi
        
        echo "✅ 정리 완료"

    - name: 📊 최종 요약
      run: |
        echo "=== Epic7 디버그 테스트 완료 ==="
        echo "🎯 테스트 모드: ${{ github.event.inputs.test_mode }}"
        echo "🔍 디버그 레벨: ${{ github.event.inputs.debug_level }}"
        echo "⏰ 완료 시간: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "✅ 모든 테스트가 성공적으로 완료되었습니다."
        echo ""
        echo "🌐 글로벌 사이트 테스트: 완료"
        echo "🌍 번역 기능 테스트: 완료"
        echo "📊 시스템 상태 점검: 완료"
        echo ""
        echo "📄 디버그 리포트와 아티팩트가 업로드되었습니다."